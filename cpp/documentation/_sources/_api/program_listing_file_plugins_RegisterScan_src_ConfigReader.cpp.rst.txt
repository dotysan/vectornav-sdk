
.. _program_listing_file_plugins_RegisterScan_src_ConfigReader.cpp:

Program Listing for File ConfigReader.cpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_RegisterScan_src_ConfigReader.cpp>` (``plugins\RegisterScan\src\ConfigReader.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "vectornav/ConfigReader.hpp"
   
   namespace VN
   {
   
   namespace RegisterScan
   {
   
   VN::Error AsciiConfigReader::next(AsciiMessage& msg)
   {
       VN::Error error{VN::Error::None};
       if (file.read(msg.data(), msg.capacity(), '\n')) { error = VN::Error::FileReadFailed; }
       return error;
   }
   
   VN::Error XmlConfigReader::next(AsciiMessage& msg)
   {
       VN::Error error{VN::Error::None};
       if (_doc.document_element().root().empty())
       {
           if (!_doc.load_file(_path.c_str()))
           {
               error = VN::Error::FileReadFailed;
               return error;
           }
           _next_node = _doc.child("VectorNav_Sensor").child("Register");
       }
   
       _curr_node = _next_node;
   
       if (!_curr_node)
       {
           error = VN::Error::FileReadFailed;
           return error;
       }
   
       if (double_config)
       {
           const auto delimeter = std::strchr(_curr_node.child("Values").first_child().value(), ';');
           std::snprintf(msg.data(), msg.capacity(), "$VNWRG,%s,%s,2*XX", _curr_node.child("Id").first_child().value(), delimeter + 1);
           double_config = false;
       }
       else
       {
           if (const auto delimieter = std::strchr(_curr_node.child("Values").first_child().value(), ';'); delimieter != nullptr)
           {
               double_config = true;
               const int length = static_cast<int>(delimieter - _curr_node.child("Values").first_child().value());
               std::snprintf(msg.data(), msg.capacity(), "$VNWRG,%s,%.*s,1*XX", _curr_node.child("Id").first_child().value(), length,
                             _curr_node.child("Values").first_child().value());
               return error;
           }
           else
           {
               snprintf(msg.data(), msg.capacity(), "$VNWRG,%s,%s*XX", _curr_node.child("Id").first_child().value(),
                        _curr_node.child("Values").first_child().value());
           }
       }
   
       _next_node = _curr_node.next_sibling();
   
       return error;
   }
   
   }  // namespace RegisterScan
   }  // namespace VN
