
.. _program_listing_file_include_vectornav_HAL_Mutex_CLI.hpp:

Program Listing for File Mutex_CLI.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_vectornav_HAL_Mutex_CLI.hpp>` (``include\vectornav\HAL\Mutex_CLI.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_MUTEX_CLI_HPP_
   #define VN_MUTEX_CLI_HPP_
   
   #include <cstdint>
   
   #include "Mutex_Base.hpp"
   #if _WIN32
   #include <Windows.h>
   #elif __linux__
   #endif
   #include <mutex>
   
   namespace VN
   {
   
   #if _WIN32
   
   class Mutex : public Mutex_Base
   {
   public:
       void lock() override final
       {
           // while (this->interlock == MUTEX_LOCKED || InterlockedCompareExchange(&this->interlock, MUTEX_LOCKED, MUTEX_UNLOCKED) == MUTEX_LOCKED) {};
           _mutex.lock();
       };
   
       void unlock() override final
       {
           // this->interlock = MUTEX_UNLOCKED;
           _mutex.unlock();
       };
   
   private:
       const static uint8_t MUTEX_LOCKED = 1;
       const static uint8_t MUTEX_UNLOCKED = 0;
   
       volatile uint64_t interlock = 0;
       std::mutex _mutex;
   };
   
   class LockGuard : public LockGuard_Base
   {
   public:
       LockGuard(Mutex& mutex) : _mutex(mutex) { _mutex.lock(); }
   
       ~LockGuard() { _mutex.unlock(); }
   
   private:
       Mutex& _mutex;
   };
   
   #elif __linux__
   static_assert(false);
   #else
   static_assert(false);
   #endif
   
   }  // namespace VN
   
   #endif  // VN_MUTEX_CLI_HPP_
