
.. _program_listing_file_plugins_Math_vectornav_SampleStats.hpp:

Program Listing for File SampleStats.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_Math_vectornav_SampleStats.hpp>` (``plugins\Math\vectornav\SampleStats.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_SAMPLESTATS_HPP_
   #define VN_SAMPLESTATS_HPP_
   
   #include "vectornav/Implementation/MeasurementDatatypes.hpp"
   #include "vectornav/LinearAlgebra.hpp"
   #include "vectornav/TemplateLibrary/Matrix.hpp"
   
   namespace VN
   {
   namespace Math
   {
   
   template <uint16_t n, typename T>
   class SampleStats
   {
   public:
       SampleStats() = default;
   
       void addSample(Matrix<n, 1, T> meas) noexcept
       {
           _cnt++;
   
           T measNorm = Math::norm(meas);
           if (_cnt == 1)
           {
               _mean = meas;
               _Q = meas - _mean;  // initializes to zero
               _max = measNorm;
           }
           else
           {
               Matrix<n, 1, T> res = (meas - _mean) / static_cast<T>(_cnt);
               _mean += res;
               _Q += static_cast<T>((_cnt - 1) * _cnt) * element_mul(res, res);
               if (measNorm > _max) { _max = measNorm; }
           }
       }
   
       Matrix<n, 1, T> getMean() const noexcept { return _mean; }
       Matrix<n, 1, T> getVariance() const noexcept { return (_cnt > 1) ? _Q / static_cast<T>(_cnt - 1) : Matrix<n, 1, T>{0}; }
       Matrix<n, 1, T> getStdDev() const noexcept { return element_sqrt(getVariance()); }
       T getMaxNorm() const noexcept { return _max; }
       uint16_t getCount() const noexcept { return _cnt; }
       void reset() noexcept { _cnt = 0; }
   
   private:
       Matrix<n, 1, T> _mean = Matrix<n, 1, T>(0);
       Matrix<n, 1, T> _Q = Matrix<n, 1, T>(0);
       T _max{0};
   
       uint16_t _cnt = 0;
   };
   
   }  // namespace Math
   }  // namespace VN
   
   #endif  // VN_SAMPLESTATS_HPP_
