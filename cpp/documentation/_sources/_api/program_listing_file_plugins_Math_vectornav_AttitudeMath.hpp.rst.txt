
.. _program_listing_file_plugins_Math_vectornav_AttitudeMath.hpp:

Program Listing for File AttitudeMath.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_Math_vectornav_AttitudeMath.hpp>` (``plugins\Math\vectornav\AttitudeMath.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_ATTITUDEMATH_HPP_
   #define VN_ATTITUDEMATH_HPP_
   
   #include "vectornav/Conversions.hpp"
   #include "vectornav/Implementation/MeasurementDatatypes.hpp"
   #include "vectornav/LinearAlgebra.hpp"
   #include "vectornav/TemplateLibrary/Matrix.hpp"
   
   namespace VN
   {
   namespace Math
   {
   
   inline std::optional<Quat> normalizeQuat(const Quat& quat) noexcept
   {
       float normQ = norm(*reinterpret_cast<const Vec4f*>(&quat));
       if (normQ < std::numeric_limits<float>::epsilon()) { return std::nullopt; }
   
       float scale = sign(quat.scalar) / normQ;
       return std::make_optional<Quat>(Quat{quat.vector * scale, quat.scalar * scale});
   }
   
   inline Quat ypr2quat(const Ypr& ypr) noexcept
   {
       Ypr yprR = deg2rad(ypr);
   
       float c1 = std::cos(yprR.yaw / 2.0f);
       float s1 = std::sin(yprR.yaw / 2.0f);
       float c2 = std::cos(yprR.pitch / 2.0f);
       float s2 = std::sin(yprR.pitch / 2.0f);
       float c3 = std::cos(yprR.roll / 2.0f);
       float s3 = std::sin(yprR.roll / 2.0f);
   
       return Quat({c1 * c2 * s3 - s1 * s2 * c3, c1 * s2 * c3 + s1 * c2 * s3, s1 * c2 * c3 - c1 * s2 * s3}, c1 * c2 * c3 + s1 * s2 * s3);
   }
   
   inline Mat3f ypr2dcm(const Ypr& ypr) noexcept
   {
       Ypr yprR = deg2rad(ypr);
   
       float st1 = std::sin(yprR.yaw);
       float ct1 = std::cos(yprR.yaw);
       float st2 = std::sin(yprR.pitch);
       float ct2 = std::cos(yprR.pitch);
       float st3 = std::sin(yprR.roll);
       float ct3 = std::cos(yprR.roll);
   
       // clang-format off
       return Mat3f({ct2 * ct1, ct2 * st1, -st2,
                     st3 * st2 * ct1 - ct3 * st1, st3 * st2 * st1 + ct3 * ct1, st3 * ct2,
                     ct3 * st2 * ct1 + st3 * st1, ct3 * st2 * st1 - st3 * ct1, ct3 * ct2,
                   });
       // clang-format on
   }
   
   inline Mat3f quat2dcm(const Quat& quat) noexcept
   {
       float q1 = quat.vector[0];
       float q2 = quat.vector[1];
       float q3 = quat.vector[2];
       float q0 = quat.scalar;
   
       // clang-format off
       return Mat3f({q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3, 2.f * (q1 * q2 + q0 * q3), 2.f * (q1 * q3 - q0 * q2),
                     2.f * (q1 * q2 - q0 * q3), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3, 2.f * (q2 * q3 + q0 * q1),
                     2.f * (q1 * q3 + q0 * q2), 2.f * (q2 * q3 - q0 * q1), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3,
                   });
       // clang-format on
   }
   
   inline Ypr dcm2ypr(const Mat3f& dcm) noexcept
   {
       Ypr ypr;
   
       if ((1.0f - std::abs(dcm(0, 2))) > 0.0f)  // not +/-90deg pitch
       {
           ypr.yaw = rad2deg(std::atan2(dcm(0, 1), dcm(0, 0)));
           ypr.pitch = rad2deg(-(std::asin(dcm(0, 2))));
           ypr.roll = rad2deg(std::atan2(dcm(1, 2), dcm(2, 2)));
       }
       else  // pitch +/-90
       {
           ypr.yaw = rad2deg(std::atan2(-dcm(1, 0), dcm(1, 1)));
           ypr.pitch = sign(dcm(0, 2)) * (-90.0f);
           ypr.roll = 0.0f;
       }
   
       return ypr;
   }
   
   inline Ypr quat2ypr(const Quat& quat) noexcept { return dcm2ypr(quat2dcm(quat)); }
   
   inline Quat dcm2quat(const Mat3f& dcm) noexcept
   {
       float tr = dcm(0, 0) + dcm(1, 1) + dcm(2, 2);
   
       Vec4f vals{tr, dcm(0, 0), dcm(1, 1), dcm(2, 2)};
       uint16_t maxIndex = maxi(vals);
   
       Quat q;
   
       switch (maxIndex)
       {
           case 0:
               q.scalar = tr + 1;
               q.vector = {dcm(1, 2) - dcm(2, 1), dcm(2, 0) - dcm(0, 2), dcm(0, 1) - dcm(1, 0)};
               break;
           case 1:
               q.scalar = dcm(1, 2) - dcm(2, 1);
               q.vector = {2 * dcm(0, 0) - tr + 1, dcm(0, 1) + dcm(1, 0), dcm(2, 0) + dcm(0, 2)};
               break;
           case 2:
               q.scalar = dcm(2, 0) - dcm(0, 2);
               q.vector = {dcm(0, 1) + dcm(1, 0), 2 * dcm(1, 1) - tr + 1, dcm(1, 2) + dcm(2, 1)};
               break;
           case 3:
               q.scalar = dcm(0, 1) - dcm(1, 0);
               q.vector = {dcm(2, 0) + dcm(0, 2), dcm(2, 1) + dcm(1, 2), 2 * dcm(2, 2) - tr + 1};
               break;
       }
   
       return normalizeQuat(q).value();  // valid DCM guarantees valid quaternion
   }
   
   inline Quat multiplyQuat(const Quat& q0, const Quat& q1) noexcept
   {
       return Quat{
           {
               q0.scalar * q1.vector[0] + q0.vector[0] * q1.scalar + q0.vector[1] * q1.vector[2] - q0.vector[2] * q1.vector[1],
               q0.scalar * q1.vector[1] - q0.vector[0] * q1.vector[2] + q0.vector[1] * q1.scalar + q0.vector[2] * q1.vector[0],
               q0.scalar * q1.vector[2] + q0.vector[0] * q1.vector[1] - q0.vector[1] * q1.vector[0] + q0.vector[2] * q1.scalar,
           },
           q0.scalar * q1.scalar - dot(q0.vector, q1.vector),
       };
   }
   
   inline Quat inverseQuat(const Quat& q) noexcept { return Quat{{q.vector * -1.0f}, q.scalar}; }
   
   inline Quat propagateQuat(Quat q0, Vec3f dTheta) noexcept
   {
       const float normdT = norm(dTheta);
       const float phi = 0.5 * normdT;
       const float cosPhi = std::cos(phi);
   
       Vec3f psi = dTheta;
       if (normdT > std::numeric_limits<float>::epsilon()) { psi *= (std::sin(phi) / normdT); }
       else { psi *= 0.5f; }
   
       // clang-format off
       Mat4f omega{{
           cosPhi, psi[2], -psi[1], psi[0],
           -psi[2], cosPhi, psi[0], psi[1],
           psi[1], -psi[0], cosPhi, psi[2],
           -psi[0], -psi[1], -psi[2], cosPhi,
       }};
       // clang-format on
   
       Vec4f vec{q0.vector(0), q0.vector(1), q0.vector(2), q0.scalar};
       Quat q = Quat(omega * vec);
   
       return normalizeQuat(q).value();  // method cannot produce invalid quaternion
   }
   
   inline float mag2yaw(const Vec3f& magBody, const Vec2f& pitchAndRoll, const float& declination = 0) noexcept
   {
       float pitch = deg2rad(pitchAndRoll[0]);
       float roll = deg2rad(pitchAndRoll[1]);
       float x = magBody[0] * std::cos(pitch) + magBody[1] * std::sin(pitch) * std::sin(roll) + magBody[2] * std::sin(pitch) * std::cos(roll);
       float y = magBody[1] * std::cos(roll) - magBody[2] * std::sin(roll);
       float yaw = rad2deg(std::atan2(-y, x)) + declination;
       return yaw;
   }
   
   inline std::optional<Vec2f> accel2pitchroll(const Vec3f& accelBody) noexcept
   {
       float normacc = norm(accelBody);
       if (normacc < std::numeric_limits<float>::epsilon()) { return std::nullopt; }
   
       float roll = std::atan2(-accelBody[1], -accelBody[2]);
       float pitch = std::asin(accelBody[0] / normacc);
       return std::make_optional<Vec2f>(rad2deg(Vec2f{pitch, roll}));
   }
   
   inline std::optional<Ypr> imu2ypr(const Vec3f& magBody, const Vec3f& accelBody, const float& declination = 0) noexcept
   {
       std::optional<Vec2f> pitchAndRoll = accel2pitchroll(accelBody);
       if (!pitchAndRoll.has_value()) { return std::nullopt; }
       float yaw = mag2yaw(magBody, pitchAndRoll.value(), declination);
       return Ypr(yaw, (*pitchAndRoll)(0), (*pitchAndRoll)(1));
   }
   
   inline Quat crp2quat(const Vec3f& crp) noexcept
   {
       float qs = 1.0f / sqrtf(1.0f + dot(crp, crp));
       return {Vec3f{crp(0) * qs, crp(1) * qs, crp(2) * qs}, qs};
   }
   
   inline std::optional<Vec3f> quat2crp(const Quat& quat) noexcept
   {
       if (abs(quat.scalar) > std::numeric_limits<float>::epsilon()) { return std::make_optional(Vec3f{quat.vector / quat.scalar}); }
       else { return std::nullopt; }
   }
   
   inline Mat3f crp2dcm(const Vec3f& crp) noexcept { return quat2dcm(crp2quat(crp)); }
   
   inline std::optional<Vec3f> dcm2crp(const Mat3f& dcm) noexcept { return quat2crp(dcm2quat(dcm)); }
   
   }  // namespace Math
   }  // namespace VN
   
   #endif  // VN_ATTITUDEMATH_HPP_
