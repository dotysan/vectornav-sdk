
.. _program_listing_file_plugins_FirmwareProgrammer_include_vectornav_FirmwareProgrammerErrors.hpp:

Program Listing for File FirmwareProgrammerErrors.hpp
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_FirmwareProgrammer_include_vectornav_FirmwareProgrammerErrors.hpp>` (``plugins\FirmwareProgrammer\include\vectornav\FirmwareProgrammerErrors.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_FIRMWAREPROGRAMMERERRORS_HPP_
   #define VN_FIRMWAREPROGRAMMERERRORS_HPP_
   
   namespace VN
   {
   namespace FirmwareProgrammer
   {
   
   enum class ErrorBL : uint16_t
   {
       // Bootloader errors from sensor
       None = 0,
       InvalidCommand = 0x01,
       InvalidRecordType = 0x02,
       InvalidByteCount = 0x03,
       InvalidMemoryAddress = 0x04,
       CommError = 0x05,
       InvalidHexFile = 0x06,
       DecryptionError = 0x07,
       InvalidBlockCRC = 0x08,
       InvalidProgramCRC = 0x09,
       InvalidProgramSize = 0x0A,
       MaxRetryCount = 0x0B,
       Timeout = 0x0C,
       Reserved = 0x0D,
   
       // Firmware update errors
       EnterBootloaderFailed = 301,
       IncompatibleVNX = 302
   };
   
   }  // namespace FirmwareProgrammer
   
   inline static const char* errorCodeToString(FirmwareProgrammer::ErrorBL error) noexcept
   {
       switch (error)
       {
           case FirmwareProgrammer::ErrorBL::None:
               return "BL:None";
           case FirmwareProgrammer::ErrorBL::InvalidCommand:
               return "BL:InvalidCommand";
           case FirmwareProgrammer::ErrorBL::InvalidRecordType:
               return "BL:InvalidRecordType";
           case FirmwareProgrammer::ErrorBL::InvalidByteCount:
               return "BL:InvalidByteCount";
           case FirmwareProgrammer::ErrorBL::InvalidMemoryAddress:
               return "BL:InvalidMemoryAddress";
           case FirmwareProgrammer::ErrorBL::CommError:
               return "BL:CommError";
           case FirmwareProgrammer::ErrorBL::InvalidHexFile:
               return "BL:InvalidHexFile";
           case FirmwareProgrammer::ErrorBL::DecryptionError:
               return "BL:DecryptionError";
           case FirmwareProgrammer::ErrorBL::InvalidBlockCRC:
               return "BL:InvalidBlockCRC";
           case FirmwareProgrammer::ErrorBL::InvalidProgramCRC:
               return "BL:InvalidProgramCRC";
           case FirmwareProgrammer::ErrorBL::InvalidProgramSize:
               return "BL:InvalidProgramSize";
           case FirmwareProgrammer::ErrorBL::MaxRetryCount:
               return "BL:MaxRetryCount";
           case FirmwareProgrammer::ErrorBL::Timeout:
               return "BL:Timeout";
           case FirmwareProgrammer::ErrorBL::Reserved:
               return "BL:Reserved";
           case FirmwareProgrammer::ErrorBL::EnterBootloaderFailed:
               return "BL:EnterBootloaderFailed";
           case FirmwareProgrammer::ErrorBL::IncompatibleVNX:
               return "BL:IncompatibleVNX";
           default:
               return "BL:Unknown error code.";
       }
   }
   
   }  // namespace VN
   #endif  // VN_FIRMWAREPROGRAMMERERRORS_HPP_
