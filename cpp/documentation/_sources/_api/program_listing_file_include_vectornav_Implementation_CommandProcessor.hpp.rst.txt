
.. _program_listing_file_include_vectornav_Implementation_CommandProcessor.hpp:

Program Listing for File CommandProcessor.hpp
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_vectornav_Implementation_CommandProcessor.hpp>` (``include\vectornav\Implementation\CommandProcessor.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_COMMANDPROCESSOR_HPP_
   #define VN_COMMANDPROCESSOR_HPP_
   
   #include <assert.h>
   
   #include <functional>
   
   #include "vectornav/Config.hpp"
   #include "vectornav/HAL/Mutex.hpp"
   #include "vectornav/Implementation/AsciiPacketProtocol.hpp"
   #include "vectornav/Implementation/CoreUtils.hpp"
   #include "vectornav/Interface/Errors.hpp"
   #include "vectornav/Interface/GenericCommand.hpp"
   #include "vectornav/TemplateLibrary/Queue.hpp"
   #include "vectornav/TemplateLibrary/String.hpp"
   
   namespace VN
   {
   
   class CommandProcessor
   {
   public:
       using AsyncErrorQueuePush = std::function<void(AsyncError&&)>;
   
       struct RegisterCommandReturn
       {
           enum class Error
           {
               None,
               CommandQueueFull,
               CommandResent
           } error;
           AsciiMessage message;
       };
   
       struct QueueItem
       {
           GenericCommand* cmd;
           Microseconds timeoutThreshold = Config::CommandProcessor::commandRemovalTimeoutLength;
       };
   
       CommandProcessor(AsyncErrorQueuePush asyncErrorQueuePush) : _asyncErrorQueuePush(asyncErrorQueuePush) {}
   
       RegisterCommandReturn registerCommand(GenericCommand* pCommand,
                                             const Microseconds timeoutThreshold = Config::CommandProcessor::commandRemovalTimeoutLength) noexcept;
   
       bool matchResponse(const AsciiMessage& response, const AsciiPacketProtocol::Metadata& metadata) noexcept;
       int queueSize() const noexcept;
       int queueCapacity() const noexcept;
       void popCommandFromQueueBack() noexcept;
       std::optional<QueueItem> getFrontCommand() noexcept;
   
   private:
       AsyncErrorQueuePush _asyncErrorQueuePush = nullptr;
   
       Queue<QueueItem, Config::CommandProcessor::commandProcQueueCapacity> _cmdQueue{};
       mutable Mutex _mutex;
   };
   
   }  // namespace VN
   
   #endif  // VN_COMMANDPROCESSOR_HPP_
