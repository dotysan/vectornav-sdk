
.. _program_listing_file_plugins_DataExport_include_vectornav_ExporterSkippedByte.hpp:

Program Listing for File ExporterSkippedByte.hpp
================================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_DataExport_include_vectornav_ExporterSkippedByte.hpp>` (``plugins\DataExport\include\vectornav\ExporterSkippedByte.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_EXPORTERSKIPPEDBYTES_HPP_
   #define VN_EXPORTERSKIPPEDBYTES_HPP_
   
   #include "vectornav/Debug.hpp"
   #include "vectornav/Exporter.hpp"
   #include "vectornav/HAL/File.hpp"
   #include "vectornav/Implementation/Packet.hpp"
   #include "vectornav/Interface/GenericCommand.hpp"
   
   namespace VN
   {
   namespace DataExport
   {
   
   class ExporterSkippedByte : public Exporter
   {
   private:
       static constexpr uint16_t EXPORTER_PACKET_CAPACITY = 2048;
   
   public:
       ExporterSkippedByte(const Filesystem::FilePath& outputDir, PacketQueueMode mode = PacketQueueMode::Force)
           : Exporter(EXPORTER_PACKET_CAPACITY, mode), _filePath(outputDir)
       {
           if (!_filePath.empty() && _filePath.back() != std::filesystem::path::preferred_separator)
           {
               _filePath = _filePath + std::filesystem::path::preferred_separator;
           }
       }
   
       void exportToFile() override
       {
           if (!_file.is_open() && _init_file()) { return; }
           while (!_queue.isEmpty())
           {
               const auto p = _queue.get();
               if (!p || (p->details.syncByte != PacketDetails::SyncByte::None)) { continue; }
   
               _file.write(reinterpret_cast<const char*>(p->buffer), p->length());
           }
       }
   
   private:
       Filesystem::FilePath _filePath;
       OutputFile _file;
   
       Errored _init_file()
       {
           Filesystem::FilePath fileName;
           std::snprintf(fileName.begin(), fileName.capacity(), "%sskippedBytes.bin", _filePath.c_str());
           _file = OutputFile(fileName);
           return _file.is_open();
       }
   };
   
   }  // namespace DataExport
   }  // namespace VN
   
   #endif  // VN_EXPORTERSKIPPEDBYTES_HPP_
