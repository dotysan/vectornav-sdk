
.. _program_listing_file_plugins_RegisterScan_include_vectornav_ConfigWriter.hpp:

Program Listing for File ConfigWriter.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_RegisterScan_include_vectornav_ConfigWriter.hpp>` (``plugins\RegisterScan\include\vectornav\ConfigWriter.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_CONFIGWRITER_HPP_
   #define VN_CONFIGWRITER_HPP_
   
   #include <cstdint>
   #include <functional>
   #include <map>
   
   #include "pugixml/pugixml.hpp"
   #include "vectornav/HAL/File.hpp"
   #include "vectornav/Interface/Sensor.hpp"
   #include "vectornav/TemplateLibrary/String.hpp"
   
   namespace VN
   {
   namespace RegisterScan
   {
   
   template <typename T>
   struct ConfigWriter
   {
       VN::Error writeConfig(const AsciiMessage& msg) { return static_cast<T*>(this)->write(msg); }
       void close() { static_cast<T*>(this)->finalize(); }
   };
   
   class AsciiConfigWriter : public ConfigWriter<AsciiConfigWriter>
   {
   public:
       AsciiConfigWriter(const Filesystem::FilePath& path) : file(path) {}
   
       VN::Error write(const AsciiMessage& msg)
       {
           if (file.write(msg.c_str())) { return VN::Error::FileWriteFailed; }
           else { return VN::Error::None; }
       }
   
       void finalize()
       {
           if (file.is_open()) { file.close(); }
       }
   
   private:
       OutputFile file;
   };
   
   class GenericConfigWriter : public ConfigWriter<GenericConfigWriter>
   {
   public:
       GenericConfigWriter(
           std::function<VN::Error(const AsciiMessage& msg)> writeConfig, std::function<void()> finalizeConfig = []() {})
           : _writeConfig(writeConfig), _finalizeConfig(finalizeConfig)
       {
       }
   
       VN::Error write(const AsciiMessage& msg) { return _writeConfig(msg); }
   
       void finalize() { _finalizeConfig(); }
   
   private:
       std::function<VN::Error(const AsciiMessage& msg)> _writeConfig;
       std::function<void()> _finalizeConfig;
   };
   
   class XmlConfigWriter : public ConfigWriter<XmlConfigWriter>
   {
   public:
       XmlConfigWriter(Sensor& sensor, const Filesystem::FilePath path) : sensor(sensor), _path(path) {}
   
       VN::Error write(const AsciiMessage& msg);
   
       void finalize();
   
   private:
       Sensor& sensor;
       Filesystem::FilePath _path;
       bool _initialized = false;
       pugi::xml_document _doc;
       pugi::xml_node _root;
   
       AsciiMessage _reg5 = "";
       AsciiMessage _reg6 = "";
       AsciiMessage _reg7 = "";
       AsciiMessage _reg99 = "";
   
       VN::Error _initialize();
       VN::Error _write(const AsciiMessage& msg, const uint16_t regId);
   };
   
   }  // namespace RegisterScan
   }  // namespace VN
   
   #endif  // VN_CONFIGWRITER_HPP_
