
.. _program_listing_file_plugins_RegisterScan_include_vectornav_ConfigReader.hpp:

Program Listing for File ConfigReader.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_RegisterScan_include_vectornav_ConfigReader.hpp>` (``plugins\RegisterScan\include\vectornav\ConfigReader.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_CONFIGREADER_HPP_
   #define VN_CONFIGREADER_HPP_
   
   #include <cstdint>
   #include <functional>
   
   #include "pugixml/pugixml.hpp"
   #include "vectornav/HAL/File.hpp"
   #include "vectornav/Interface/Sensor.hpp"
   #include "vectornav/TemplateLibrary/String.hpp"
   
   namespace VN
   {
   
   namespace RegisterScan
   {
   
   template <typename T>
   struct ConfigReader
   {
       VN::Error getNextConfig(AsciiMessage& msg) { return static_cast<T*>(this)->next(msg); }
   };
   
   class GenericConfigReader : public ConfigReader<GenericConfigReader>
   {
   public:
       GenericConfigReader(std::function<VN::Error(AsciiMessage&)> getNextConfig) : _next(getNextConfig) {}
   
       VN::Error next(AsciiMessage& msg)
       {
           VN::Error error = _next(msg);
           return error;
       }
   
   private:
       std::function<VN::Error(AsciiMessage&)> _next = nullptr;
   };
   
   class AsciiConfigReader : public ConfigReader<AsciiConfigReader>
   {
   public:
       AsciiConfigReader(const Filesystem::FilePath& path) : file(path) {}
   
       VN::Error next(AsciiMessage& msg);
   
   private:
       InputFile file;
   };
   
   class XmlConfigReader : public ConfigReader<XmlConfigReader>
   {
   public:
       XmlConfigReader(const Filesystem::FilePath& path) : _path(path) {}
   
       VN::Error next(AsciiMessage& msg);
   
   private:
       bool double_config = false;
       pugi::xml_node _curr_node;
       pugi::xml_node _next_node;
       Filesystem::FilePath _path;
       pugi::xml_document _doc;
   };
   
   }  // namespace RegisterScan
   }  // namespace VN
   
   #endif  // VN_CONFIGREADER_HPP_
