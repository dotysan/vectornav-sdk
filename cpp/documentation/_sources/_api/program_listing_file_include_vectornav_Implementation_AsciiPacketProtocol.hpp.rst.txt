
.. _program_listing_file_include_vectornav_Implementation_AsciiPacketProtocol.hpp:

Program Listing for File AsciiPacketProtocol.hpp
================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_vectornav_Implementation_AsciiPacketProtocol.hpp>` (``include\vectornav\Implementation\AsciiPacketProtocol.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_ASCIIPACKETPROTOCOL_HPP_
   #define VN_ASCIIPACKETPROTOCOL_HPP_
   
   #include "vectornav/Config.hpp"
   #include "vectornav/HAL/Timer.hpp"
   #include "vectornav/Implementation/AsciiHeader.hpp"
   #include "vectornav/Implementation/MeasurementDatatypes.hpp"
   #include "vectornav/Implementation/PacketDispatcher.hpp"
   #include "vectornav/Interface/CompositeData.hpp"
   #include "vectornav/TemplateLibrary/ByteBuffer.hpp"
   #include "vectornav/TemplateLibrary/String.hpp"
   
   namespace VN
   {
   namespace AsciiPacketProtocol
   {
   
   enum class AsciiMeasurementHeader
   {
       None,
       INS,
       YPR,
       QTN,
       QMR,
       MAG,
       ACC,
       GYR,
       MAR,
       YMR,
       YBA,
       YIA,
       IMU,
       GPS,
       GPE,
       INE,
       ISL,
       ISE,
       DTV,
       G2S,
       G2E,
       HVE,
       RTK
   };
   
   using DelimiterIndices = Vector<uint16_t, Config::PacketFinders::asciiMaxFieldCount>;
   using AsciiParameter = String<Config::PacketFinders::asciiFieldMaxLength>;
   using Validity = PacketDispatcher::FindPacketRetVal::Validity;
   
   struct Metadata
   {
       AsciiHeader header;
       uint16_t length;
       DelimiterIndices delimiterIndices;
       time_point timestamp;
   };
   
   struct FindPacketReturn
   {
       Validity validity;
       Metadata metadata;
   };
   
   AsciiMeasurementHeader getMeasHeader(AsciiHeader headerChars);
   
   EnabledMeasurements asciiHeaderToMeasHeader(const AsciiMeasurementHeader header) noexcept;
   
   FindPacketReturn findPacket(const ByteBuffer& byteBuffer) noexcept;
   
   FindPacketReturn findPacket(const ByteBuffer& byteBuffer, const size_t syncByteIndex) noexcept;
   
   std::optional<CompositeData> parsePacket(const ByteBuffer& buffer, const size_t syncByteIndex, const Metadata& metadata,
                                            AsciiMeasurementHeader measEnum) noexcept;
   
   bool allDataIsEnabled(const AsciiMeasurementHeader header, const EnabledMeasurements& measurementsToCheck) noexcept;
   
   bool anyDataIsEnabled(const AsciiMeasurementHeader header, const EnabledMeasurements& measurementsToCheck) noexcept;
   
   bool asciiIsMeasurement(const AsciiMeasurementHeader header) noexcept;
   
   bool asciiIsParsable(const AsciiMeasurementHeader header) noexcept;
   
   }  // namespace AsciiPacketProtocol
   
   class AsciiPacketExtractor
   {
   public:
       AsciiPacketExtractor(const ByteBuffer& buffer, const AsciiPacketProtocol::Metadata& metadata, uint16_t offset = 0)
           : _buffer(buffer, offset), _metadata(metadata)
       {
       }
   
       AsciiPacketExtractor(uint8_t* buffer, const AsciiPacketProtocol::Metadata& metadata)
           : _buffer(buffer, metadata.length, metadata.length), _metadata(metadata)
       {
       }
   
       template <class T>
       bool extract(std::optional<T>& value) noexcept
       {
           auto asciiParameter = nextAsciiParameter();
           if (!asciiParameter.has_value()) { return true; }
           value = StringUtils::fromString<T>(asciiParameter.value().begin(), asciiParameter.value().end());
           _delIndex++;
           return !value.has_value();
       }
   
       template <uint16_t N, uint16_t M, typename T>
       bool extract(std::optional<Matrix<N, M, T>>& value) noexcept;
   
       std::optional<AsciiPacketProtocol::AsciiParameter> nextAsciiParameter()
       {
           AsciiPacketProtocol::AsciiParameter asciiParameter;
           if (_delIndex + 1 >= _metadata.delimiterIndices.size()) { return std::nullopt; }
           if (_buffer.peek(reinterpret_cast<uint8_t*>(asciiParameter.begin()),
                            _metadata.delimiterIndices[_delIndex + 1] - 1 - _metadata.delimiterIndices[_delIndex], _metadata.delimiterIndices[_delIndex] + 1))
           {
               return std::nullopt;
           }
           return asciiParameter;
       }
   
       bool extractHex(std::optional<uint16_t>& value) noexcept
       {
           auto asciiParameter = nextAsciiParameter();
           if (!asciiParameter.has_value()) { return true; }
           value = StringUtils::fromStringHex<uint16_t>(asciiParameter.value().begin(), asciiParameter.value().end());
           _delIndex++;
           return !value.has_value();
       }
   
       bool discard(const uint16_t numDiscard)
       {
           if (_delIndex + numDiscard > _metadata.delimiterIndices.size()) { return true; }
           _delIndex += numDiscard;
           return true;
       }
   
       AsciiHeader header() const noexcept { return _metadata.header; };
       uint16_t length() const noexcept { return _metadata.length; };
   
   private:
       const ByteBuffer _buffer;
       const AsciiPacketProtocol::Metadata& _metadata;
       size_t _delIndex = 0;
   };
   
   template <uint16_t N, uint16_t M, typename T>
   bool AsciiPacketExtractor::extract(std::optional<Matrix<N, M, T>>& value) noexcept
   {
       Matrix<N, M, T> mat;
       for (uint16_t i = 0; i < N * M; i++)
       {
           std::optional<T> tmp;
           if (extract(tmp)) { return true; }
           else { mat[i] = tmp.value(); }
       }
       value = mat;
       return false;
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<Lla>& value) noexcept
   {
       std::optional<Vec3d> lla;
       if (extract(lla)) { return true; };
   
       value = Lla(lla.value());
       return false;
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<InsStatus>& value) noexcept
   {
       auto asciiParameter = nextAsciiParameter();
       if (!asciiParameter.has_value()) { return true; }
       value = StringUtils::fromStringHex<uint16_t>(asciiParameter.value().begin(), asciiParameter.value().end());
       _delIndex++;
       return !value.has_value();
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<AhrsStatus>& value) noexcept
   {
       auto asciiParameter = nextAsciiParameter();
       if (!asciiParameter.has_value()) { return true; }
       value = StringUtils::fromStringHex<uint16_t>(asciiParameter.value().begin(), asciiParameter.value().end());
       _delIndex++;
       return !value.has_value();
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<GnssStatus>& value) noexcept
   {
       auto asciiParameter = nextAsciiParameter();
       if (!asciiParameter.has_value()) { return true; }
       value = StringUtils::fromStringHex<uint16_t>(asciiParameter.value().begin(), asciiParameter.value().end());
       _delIndex++;
       return !value.has_value();
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<ImuStatus>& value) noexcept
   {
       auto asciiParameter = nextAsciiParameter();
       if (!asciiParameter.has_value()) { return true; }
       value = StringUtils::fromStringHex<uint16_t>(asciiParameter.value().begin(), asciiParameter.value().end());
       _delIndex++;
       return !value.has_value();
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<TimeStatus>& value) noexcept
   {
       auto asciiParameter = nextAsciiParameter();
       if (!asciiParameter.has_value()) { return true; }
       value = StringUtils::fromStringHex<uint8_t>(asciiParameter.value().begin(), asciiParameter.value().end());
       _delIndex++;
       return !value.has_value();
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<Time>& value) noexcept
   {
       std::optional<double> gpsTowd;
       if (extract(gpsTowd)) { return true; }
   
       value = Time(gpsTowd.value());
       return false;
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<DeltaTheta>& value) noexcept
   {
       std::optional<float> deltaTime;
       std::optional<Vec3f> deltaTheta;
   
       if (extract(deltaTime)) { return true; };
       if (extract(deltaTheta)) { return true; };
   
       value = DeltaTheta(deltaTime.value(), deltaTheta.value());
       return false;
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<Ypr>& value) noexcept
   {
       std::optional<Vec3f> ypr;
       if (extract(ypr)) { return true; };
       value = Ypr(ypr.value());
       return false;
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract(std::optional<Quat>& value) noexcept
   {
       std::optional<Vec3f> vector;
       std::optional<float> scalar;
       if (extract(vector)) { return true; };
       if (extract(scalar)) { return true; };
       value = Quat(vector.value(), scalar.value());
       return false;
   }
   
   template <>
   inline bool AsciiPacketExtractor::extract([[maybe_unused]] std::optional<GnssDop>& value) noexcept
   {
       return true;
   }
   template <>
   inline bool AsciiPacketExtractor::extract([[maybe_unused]] std::optional<GnssTimeInfo>& value) noexcept
   {
       return true;
   }
   template <>
   inline bool AsciiPacketExtractor::extract([[maybe_unused]] std::optional<TimeUtc>& value) noexcept
   {
       return true;
   }
   template <>
   inline bool AsciiPacketExtractor::extract([[maybe_unused]] std::optional<GnssSatInfo>& value) noexcept
   {
       return true;
   }
   template <>
   inline bool AsciiPacketExtractor::extract([[maybe_unused]] std::optional<GnssRawMeas>& value) noexcept
   {
       return true;
   }
   
   }  // namespace VN
   
   #endif  // VN_ASCIIPACKETPROTOCOL_HPP_
