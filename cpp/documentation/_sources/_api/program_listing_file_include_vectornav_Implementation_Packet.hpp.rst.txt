
.. _program_listing_file_include_vectornav_Implementation_Packet.hpp:

Program Listing for File Packet.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_vectornav_Implementation_Packet.hpp>` (``include\vectornav\Implementation\Packet.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_PACKET_HPP_
   #define VN_PACKET_HPP_
   
   #include <array>
   #include <cstdint>
   
   #include "AsciiPacketProtocol.hpp"
   #include "FaPacketProtocol.hpp"
   #include "FbPacketProtocol.hpp"
   #include "PacketDispatcher.hpp"
   
   namespace VN
   {
   
   struct PacketDetails
   {
       enum class SyncByte : uint8_t
       {
           FA = 0xFA,
           Ascii = '$',
           FB = 0xFB,
           None = 0,
       } syncByte;
   
       union
       {
           AsciiPacketProtocol::Metadata asciiMetadata;
           FaPacketProtocol::Metadata faMetadata;
           FbPacketProtocol::Metadata fbMetadata;
           PacketMetadata<uint8_t> defaultMetadata;
       };
       PacketDetails() : syncByte(SyncByte::None), defaultMetadata() {}
   };
   
   struct Packet
   {
       Packet(uint16_t capacity) : buffer(new uint8_t[capacity]), capacity(capacity) {}
   
       template <uint16_t Capacity>
       Packet(std::array<uint8_t, Capacity>& externalBuffer) : buffer(externalBuffer.data()), capacity(Capacity), _autoAllocated(false)
       {
       }
       ~Packet()
       {
           if (_autoAllocated) { delete[] buffer; }
       }
   
       Packet(const Packet&) = delete;
       Packet& operator=(const Packet&) = delete;
   
       Packet(Packet&& other) noexcept : details(std::move(other.details)), _autoAllocated(true)
       {
           if (other._autoAllocated) { std::swap(buffer, other.buffer); }
           else
           {
               buffer = new uint8_t[other.capacity];
               std::memcpy(buffer, other.buffer, other.capacity);
           }
           std::swap(capacity, other.capacity);
       }
   
       Packet& operator=(Packet&&) = delete;
   
       PacketDetails details{};
       uint8_t* buffer = nullptr;
       uint16_t capacity = 0;
       uint16_t length() const noexcept
       {
           switch (details.syncByte)
           {
               case PacketDetails::SyncByte::FA:
                   return details.faMetadata.length;
               case PacketDetails::SyncByte::Ascii:
                   return details.asciiMetadata.length;
               case PacketDetails::SyncByte::FB:
                   return details.fbMetadata.length;
               case PacketDetails::SyncByte::None:
                   return details.defaultMetadata.length;
               default:
                   return 0;
           }
       }
   
       time_point timestamp() const noexcept
       {
           switch (details.syncByte)
           {
               case PacketDetails::SyncByte::FA:
                   return details.faMetadata.timestamp;
               case PacketDetails::SyncByte::Ascii:
                   return details.asciiMetadata.timestamp;
               case PacketDetails::SyncByte::FB:
                   return details.fbMetadata.timestamp;
               case PacketDetails::SyncByte::None:
                   return details.defaultMetadata.timestamp;
               default:
                   return time_point();
           }
       }
   
   private:
       const bool _autoAllocated = true;
   };
   
   }  // namespace VN
   
   #endif  // VN_PACKET_HPP_
