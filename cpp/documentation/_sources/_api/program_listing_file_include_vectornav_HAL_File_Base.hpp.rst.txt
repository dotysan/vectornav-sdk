
.. _program_listing_file_include_vectornav_HAL_File_Base.hpp:

Program Listing for File File_Base.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_vectornav_HAL_File_Base.hpp>` (``include\vectornav\HAL\File_Base.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_FILE_BASE_HPP_
   #define VN_FILE_BASE_HPP_
   
   #include "vectornav/TemplateLibrary/String.hpp"
   
   namespace VN
   {
   namespace Filesystem
   {
   using FilePath = String<256>;
   bool exists(const FilePath& filePath) noexcept;
   }  // namespace Filesystem
   
   class InputFile_Base
   {
   public:
       virtual ~InputFile_Base() {};
   
       virtual bool open(const Filesystem::FilePath& filePath) = 0;
   
       virtual void close() = 0;
   
       virtual bool is_open() const = 0;
   
       virtual void reset() = 0;
   
       virtual bool read(char* buffer, const size_t count) = 0;
   
       virtual bool read(char* buffer, const size_t bufferCapacity, const char endChar) = 0;
   
       virtual bool getLine(char* buffer, const size_t capacity) = 0;
   };
   
   class OutputFile_Base
   {
   public:
       virtual ~OutputFile_Base() = default;
   
       virtual bool open(const Filesystem::FilePath& filePath) = 0;
   
       virtual void close() = 0;
   
       virtual bool is_open() const = 0;
   
       virtual void reset() = 0;
   
       virtual bool write(const char* buffer, const size_t count) = 0;
   
       virtual bool write(const char* buffer) = 0;
   
       virtual bool writeLine(const char* buffer, const size_t count) = 0;
   
       virtual bool writeLine(const char* buffer) = 0;
   };
   
   }  // namespace VN
   
   #endif  // VN_FILE_BASE_HPP_
