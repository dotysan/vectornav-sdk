
.. _program_listing_file_include_vectornav_Interface_GenericCommand.hpp:

Program Listing for File GenericCommand.hpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_vectornav_Interface_GenericCommand.hpp>` (``include\vectornav\Interface\GenericCommand.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_GENERICCOMMAND_HPP_
   #define VN_GENERICCOMMAND_HPP_
   
   #include "vectornav/HAL/Mutex.hpp"
   #include "vectornav/HAL/Timer.hpp"
   #include "vectornav/Implementation/MeasurementDatatypes.hpp"
   #include "vectornav/Interface/Errors.hpp"
   #include "vectornav/TemplateLibrary/String.hpp"
   
   namespace VN
   {
   
   using AsciiMessage = String<Config::CommandProcessor::messageMaxLength>;
   
   class GenericCommand
   {
   public:
       GenericCommand(const AsciiMessage& commandString = "", const uint8_t numCharToMatch = 3) : _commandString(commandString), _numCharToMatch(numCharToMatch) {}
   
       virtual ~GenericCommand() = default;
   
       GenericCommand(const GenericCommand& other)
       {
           LockGuard lock(other._mutex);
           _commandString = other._commandString;
           _numCharToMatch = other._numCharToMatch;
           _awaitingResponse = other._awaitingResponse;
           _responseMatched = other._responseMatched;
           _sentTime = other._sentTime;
           _responseTime = other._responseTime;
       }
   
       GenericCommand& operator=(const GenericCommand& other)
       {
           if (this == &other) { return *this; }
   
           LockGuard thisLock(_mutex);
           LockGuard otherLock(other._mutex);
   
           _commandString = other._commandString;
           _numCharToMatch = other._numCharToMatch;
           _awaitingResponse = other._awaitingResponse;
           _responseMatched = other._responseMatched;
           _sentTime = other._sentTime;
           _responseTime = other._responseTime;
           return *this;
       }
   
       GenericCommand(GenericCommand&& other) noexcept
       {
           LockGuard lock(other._mutex);
   
           _commandString = std::move(other._commandString);
           _numCharToMatch = other._numCharToMatch;
           _awaitingResponse = other._awaitingResponse;
           _responseMatched = other._responseMatched;
           _sentTime = other._sentTime;
           _responseTime = other._responseTime;
       }
   
       GenericCommand& operator=(GenericCommand&& other) noexcept
       {
           LockGuard lock(other._mutex);
   
           _commandString = std::move(other._commandString);
           _numCharToMatch = other._numCharToMatch;
           _awaitingResponse = other._awaitingResponse;
           _responseMatched = other._responseMatched;
           _sentTime = other._sentTime;
           _responseTime = other._responseTime;
   
           return *this;
       }
   
       // -------------------------------
       // -------------------------------
   
       bool isAwaitingResponse() const noexcept;
   
       bool hasValidResponse() const noexcept;
   
       std::optional<Error> getError() const noexcept;
   
       AsciiMessage getResponse() const noexcept;
   
       time_point getSentTime() const noexcept
       {
           LockGuard lock(_mutex);
           return _sentTime;
       }
   
       time_point getResponseTime() const noexcept
       {
           LockGuard lock(_mutex);
           return _responseTime;
       }
   
       void setStale() noexcept
       {
           LockGuard lock(_mutex);
           _awaitingResponse = false;
           _responseMatched = false;
       }
   
       // -------------------------------
       // -------------------------------
   
       virtual AsciiMessage getCommandString() noexcept;
   
       virtual bool matchResponse(const AsciiMessage& responseToCheck, const time_point timestamp) noexcept;
   
       void prepareToSend() noexcept;
   
       static bool isMatchingError(const AsciiMessage& errIn) noexcept;
   
   protected:
       static std::optional<uint16_t> _getErrorValue(const AsciiMessage& errIn) noexcept;
       bool _hasValidResponse() const noexcept;
   
       AsciiMessage _commandString;
       uint8_t _numCharToMatch;
       time_point _sentTime;
       time_point _responseTime;
   
       bool _awaitingResponse = false;
       bool _responseMatched = false;
       mutable Mutex _mutex;
   };
   }  // namespace VN
   
   #endif  // VN_GENERICCOMMAND_HPP_
