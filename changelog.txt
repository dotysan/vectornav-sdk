0.22.0
 - Global  : Increased maximum ASCII and command message sizes in Config.hpp
 - Global  : Enforced camelCase on register field names (eg. gnss1AltMSL->gnss1AltMsl or posEX->posEx)
 - Global  : Add timestamps to AsyncError struct
 - Cpp     : Added optional parameter to changeBaudRate function so the serialPort can be specified
 - Cpp     : Added Register 51 to listed configuration registers  
 - Cpp     : Added a getMeasurementRegisterName() function to complement the getConfigRegisterName() function
 - Cpp     : Renamed the Command class to GenericCommand
 - Cpp     : Reduce size_t integers to uint16_t where applicable
 - Cpp     : Changed Commands example to NonBlockingCommands for a more realistic use case
 - Python  : Renamed the Command class to GenericCommand
 - Python  : Removed Commands module and moved all classes associated with it into the main vectornav module
 - Python  : Added numBytesAvailable to SimpleLogger
 - Python  : Add ability to print parsing statistics for DataExport, and updated example
 - Python  : Add capability to export skipped bytes and updated example
 - Python  : Changed commands.py example to non_block_polling.py for a more realistic use case
 - Cli     : Add ability to print parsing statistics for DataExport, and updated examples for Matlab and C#
 - Cli     : Add capability to export skipped bytes and updated examples for Matlab and C#
 - Cli     : Added NumBytesAvailable to SimpleLogger
 - Cli     : Refactored Commands and renamed the Command class to GenericCommand
 - Cli     : Added Firmware Update plugin
 - Matlab  : Added Firmware Update example
 - Matlab  : Added NonBlockingCommands example
 - Matlab  : Added Data Export examples
 - C#      : Added NonBlockingCommands example
 - Plugin  : Math; Refactored cpp plugin. Split up and renamed files. Moved all functions to Math namespace 
			 (eliminated namespaces for LinAlg, Conversions, AttConversions and PosVelConversions)
 - Plugin  : Math; Renamed functions for consistency and added several new functions needed for Calibration.
 - Plugin  : DataExport; Updated names for column headings on CSV export
 - Plugin  : FirmwareUpdate; Fix printing of error codes received
 - Plugin  : FirmwareUpdate; Allow resending of lines after a comm error has occurred
 - Plugin  : FirmwareUpdate; When recovering firmware version, fix current attempt to reload a firmware already successfully loaded, 
			 causing a reported failure
 - Plugin  : FirmwareUpdate; Fix usage of vnxml on VN-300
 - Plugin  : Calibration; Removed deprecated RfrAndBiasCalculator from Calibration plugin.  All languages.
 - Plugin  : RegScan; Bug fixes to handle responses from all registers
 - Plugin  : RegScan; Added pause & resume async for more reliable saving configuration

 
0.21.0
 - RegScan : Completley rewrite plugin to allow lighter weight, more stable, and more modular use. 
               Load and save in any user-defined way or format (pre-written are xml and unparsed ascii, lambda injection allowed).
               Added new saveNonDefaultConfiguration method to do full default setting check, requiring an RFS (similar to previous saveConfiguration method).
               Redefined saveConfiguration not to include any default comparison, RFS, Write Settings, or Reset.
               Added setConfigurationRegisters to load registers as-is without any other commands.
               Redefined loadConfiguration to include a preceeding RFS and succeeding WriteSettings and Reset.
               Split out examples to be specific to each method (loadConfiguration, saveConfiguration, saveNonDefaultConfiguration).
               Stability improvements.
               Improve handling of exceptional registers.
               More granular error reporting.
 - Cli     : Delete all register scan bindings (will be readded in future release)
 - Cpp     : Default File_Pc InputFile nullTerminateRead to true
 - Cpp     : Added read overload in InputFile to allow an end char
 - Global  : Redefine Sensor::serialSend to accept a char* rather than an AsciiMessage, to avoid accidental truncation of raw string
 - Export  : Add GNSS3 as csv exportable
 - Math    : Refactored Conversions with PosVel and Attitude
 - Global  : Change Reference Frame Rotation fields from rFR to rfr
 - Cpp     : Replace use of platform-dependent integer types in favor of fixed-width, where possible
 - Cpp     : Standardize include guards according to Google C++ Style Guide
 - Cpp     : Added vectornav sublayer to include dirs
 - Cli     : Standardize include guards according to Google C++ Style Guide
 - Cli     : Added vectornav sublayer to include dirs
 - Cpp     : Calibration; Add plugin for static IMU bias and RFR calculation. Includes supporting methods in Math plugin.

 0.19.0
 - Export  : Fix bug causing extra csv field when SatInfo.NumSats reports as 0
 - Export  : Fix bug causing missing csv header when GnssStatus or GnssAltMsl are present
 - Global  : Fix bug causing invalid FA packets to be flagged as incomplete
 - Global  : Fix bug causing crash when too many bytes are found in possible FA packet header to fit in vector, instead marking invalid
 - Global  : Automatically remove commands longer than new parameter commandRemovalTimeoutLength from command queue, preventing possible dealock
 - Cpp     : Add optional parameter to Sensor::sendCommand to select the commmand's removal timeout
 - Export  : Add ability to print parsing statistics, and add to example
 - Cpp     : Split SATELLITE_MAX_COUNT into GNSS_SAT_INFO_MAX_COUNT and GNSS_RAW_MEAS_MAX_COUNT
 - Cpp     : Separate allocated size of GnssSatInfo from GnssRawMeas by adding GNSS_RAW_MEAS_MAX_COUNT  int, and gnssRawMeasMaxCount config value
 - Cpp     : Change default sizes of GNSS_SAT_INFO_MAX_COUNT to 35, and GNSS_RAW_MEAS_MAX_COUNT  to 55
 - Cpp     : Change default value of PortNameMaxLength to 32
 - Global  : Update default skippedReceivedByteBufferMaxPutLength from 1000 bytes to 1 kB
 - Global  : Add throwing of async errors when skippedByteBuffer or receivedByteBuffer are overrun, causing dropped bytes
 - Global  : Added Async Errors SkippedByteBufferFull and ReceivedByteBufferFull
 - Global  : Allow PacketSynchronizer to log skipped and received bytes longer than allocated linear buffer
 - Cpp     : Modify SimpleLogger example to preallocate 3kB buffer
 - SLogger : Add accessor to the number of logged bytes so far
 - Cpp     : Add monitoring of the AsyncErrorQueue and printing the number of logged bytes to SimpleLogger example
 - Export  : Add capability to export skipped bytes and updated example
 - Cpp     : Remove errant CONST_IF_THREADED, correctly marking all methods previously using it non-const
 - HsiCal  : Added AddMeasurement method to allow iterative use
 - Math    : Non-invertible matrix now returns a null matrix instead of an identity matrix
 - SLogger : Add destructor to stop logging, so an object destoryed while logging doesn't deadlock or keep thread open
 - SLogger : Delete assignment and move operators

0.18.0
 - Cli    : Add Matrix class to more closely align with Cpp design, referencing for Vec3f etc. Is a value class and expands accessors.
 - Cli    : Add bindings for HSI plugin
 - Cli    : Add protection for plugins that do not exist
 - Cpp    : Add Matrix methods for accessors and iterators, mark methods noexcept
 - Cpp    : Force all files to LF line ending
 - Global : DataExporter; Remove uses of dynamic errorful STL containers
 - Global : DataExporter; SatInfo and RawMeas are pulled to their own files
 - Global : DataExporter; RawMeas prints a new line per signal measurement, rather than per epoch
 - Global : DataExporter; Pull out constants to top of file for quick customizing
 - Global : Calibration; Add plugin for bias calculation, HSI calibration, and RFR and bias calculation. (For distribution, ask VectorNav support) Includes supporting methods in Math plugin.
 - Global : Remove use of unions from cpp bitfield types. Removes _value accessor for underlying type in favor of an explicit cast. 
 - Cpp    : Add safety to bitfield definitions.
 - Global : Update gpsTow field names in Registers 58, 59, 103, 104, 63, 64 to match latest ICD. 
 - CLI    : Explicitly state namespace in various filesystem.
 - Cpp    : Force files to LF only line endings.
 - Cpp    : Add argument support to DataExportFromFile example.
 - Cpp    : Add Rvalue assignment operator for InputFile and Output file classes. 
 - Cpp    : Resolve MSVC build warning due to union construction ambiguity.
 - Cpp    : Conversions; As rad2deg and deg2rad methods.
 - Global : SimpleLogger; Default to 1ms sleep timer to reduce CPU use.
 - Matlab : Minor GettingStarted example change.
 
0.15.2
 - Python : Fix DataExport example

0.15.1
 - Python : Add DataExport examples
 - Cpp    : Add DatExportFromFile.bin to example

0.15.0
 - Cpp    : Improve scoping of examples' CMakeLists
 - Cpp    : Fix compilation failure of ExporterRinex
 - Python : Fix incorrect definition of Sensor::WriteSettings
 - Cpp    : Correct Lla altitude constructor datatype to double, from float
 - Global : Correct column/row major bugs in Math plugin
 - Cpp    : Add Calibration plugin

0.14.3
 - Python : Add accidentally deleted documentation

0.14.2
 - ROS    : Fix GNSS SatInfo/RawMeas and make enabled by default
 - Python : Clean templated type usage
 - Python : Add binding for __iter__ to allow data unpacking on Matrix types
 - Global : Rename SatInfo and RawMeas field names to match ICD:
            SatInfo.count -> SatInfo.numSats
            RawMeas.numSats -> rawMeas.numMeas, rawMeas.freq -> rawMeas.band, rawMeas.slot -> rawMeas.freqNum

0.14.0
 - Global : Correct baud rate to two words, including changing variable and method names that invoke it (e.g. Sensor::changeBaudrate -> Sensor::changeBaudRate)
 - Python : Rename project from VectorNav-Software-Development-Kit to VectorNav, and package from vnpy to vectornav
 - Global : Renamed all outputs in GNSS1, GNSS2, GNSS3
 - Global : Renamed Time.GpsTow to Time.TimeGpsTow, Time.GpsWeek to Time.TimeGpsWeek
 - Global : Renamed SatInfo.Count to SatInfo.NumSats, RawMeas.NumSats to RawMeas.NumMeas, RawMeas.Freq to RawMeas.Band, RawMeas.Slot to RawMeas.FreqNum
 - Global : Change Time.TimeUtc datatype from uint16 to int16
 - Global : Rename GNSS and time outputs in relevant register classes
 - Global : Fix rare bug causing data corruption when assigning command objects while threaded
 - Global : Splot out RealTimeHsiControl fields to individual fields
 - Global : Add hwMinVer field to HwVer register
 - Python : Fix python binding for Exporter::getQueuePtr
 - Global : Update docs
 - Cli    : Force a compile failure if on Linux

0.12.0
 - Global : gpsTow, timeGps, timeSyncIn, timeGpsPps, timeStartup are now a new Time type
 - Global : Fixed bug in data export
 - Global : CompositeData now contains new InsStatus, ImuStatus, AhrsStatus, GnssStatus, and TimeStatus datatypes instead of generic alternatives
 - Cpp    : Refactor FaPacket/AsciiPacket to FaPacketExtractor/AsciiPacketExtractor to allow a common interface for extracting data from packets
 - Global : Switched Ypr from Vec3f, Lla from Vec3d, DCM from std::array<std::array<float,3>,3>, and DeltaTheta from Vec4f to distinct types
 - Cpp    : Migrate underlying c-style ASCII numeric parsing to use c++ from_chars
 - Cpp    : Fix uncommon bug in ByteBuffer causing bytes to be incorrectly copied during buffer wraparound
 - Python : Fix bug in Vec3d causing inability to access data elements
 - Cpp    : Change StaticallyAllocatedQueue ::requestPut and ::get return type from a std::optional<std::shared_ptr<~>> to std::shared_ptr<~>, where nullptr indicates no object available. Propagates up to Sensor::getNextMeasurement, Sensor::getMostRecentMeasurement
 - Global : Save CPU by increasing default Config.hpp sleep timers above 0; increase various buffer default capacities to handle full bandwidth at MSVC Windows' roughly 15ms minimum sleep length
 - Global : On Windows, set global setting timeBeginPeriod to 1ms for every thread sleep to improve timing reliability, which Windows undoes upon completion of executable
 - Global : Improve nonthreaded speed to receive command reply by minor sleep behavior changes
 - Global : Add retry on Sensor::reset 's reset command
 - Cli    : Add support for SimpleLogger plugin
 - Global : Switch publishing order, such that subscribers publish before CompositeDataQueue
 - Cli    : Add support for DataExport plugin
 - Cli    : Add support for SkippedByteBuffer and ReceivedByteBuffer
 - Export : Fix export from file bug causing some dropped packets
 - Cli    : Add support for RegisterScan plugin
 - Cli    : Add support for FirmwareUpdate plugin
 - Cpp    : Rename CircularBuffer to Queue, and StaticallyAllocatedQueue to DirectAccessQueue
 - Cpp    : Templaize Queue and DirectAccessQueue to make them fully statically allocated
 - Cpp    : Return DirectAccessQueue<~>::UniquePtr rather than a std::shared_ptr<~> in put and get methods
 - Cpp    : Rename DirectAccessQueue::requestPut to DirectAccessQueue::put
 - Global : Change DirectAccessQueue (which includes CompositeDataQueue) to force put new data if queue is full but not current get. Makes Sensor::getMostRecentMeasurement actually return the most recent found
 - Cpp    : Add Sensor constructor to allocate main and fb byte buffers, and StaticAllocation example to demonstrate
 - Global : Remove Sensor::MeasurementQueueSize method
 - Cpp    : Add ability for Packet to be statically allocated
 - Global : Fix bug when retrying sending a command when other commands are in queue
 - Global : Rename FilteredPacketQueue to PacketQueue
 - Global : Added constexpr checks for early returns in case CompositeDataQueueCapacity or CommandProcQueueCapacity is set to zero

0.10.0
 - Python : Add support for SimpleLogger plugin; add example and documentation
 - Export : Add data export plugin in both c++ and python; exports to csv or rinex from sensor or from file
 - Cli    : Switch to enable threading
 - Cpp    : Fix bug causing the Serial port to throw on some compilers on Windows when disconnecting an unconnected sensor
 - Cpp    : Rename Conversions plugin to Math
 - Math   : Reorganize into 3 files, taking much of the code from the TemplateLibrary/Matrix.hpp
 
0.9.0
 - Cpp    : Add timestamping to received packets, commands, and CompositeData objects
 - Cpp    : Adjust packet classes to maintain a linear buffer rather than ByteBuffer
 - ROS    : Add ROS2 cpp plugin
 - Python : Add Registers documentation
 - Cpp    : Add SimpleLogger plugin for logging binary data
 - Global : Make ByteBuffer class more thread safe for SPSC applications
 - Cli    : Split out Registers enums to bitfields to match cpp and python formatting
 - Cpp    : Add operator/ to file HAL
 - Cpp    : Reorder AsciiPacket constructor 
 - Cpp    : Remove ByteBuffer assignment, move, and copy constructors
 - Global : Fix bug causing incorrect flag to be set when a Command object is reused

0.7.0
 - Global : Change TimeUtcData, GnssTimeInfoData, GnssDopData, GnssSatInfoData, and GnssRawMeasData to remove "Data" from name, and data members to camelCase
 - Global : Substitute Vec4f for DeltaTheta and Quat
 - Net    : Add CLI language for use in C# and Matlab
 - Cpp    : Rename cmdWaitMode enum to SendCommandBlockMode and correct caps of values. Fill out Sensor method documentation.
 - Cpp    : Update CMakeLists. Primary change is building as objects rather than statically.
 - Cpp    : Fix MSVC build warnings
 - Cpp    : Fix bug in extracting subscribed Fa packets
 - Python : Rename cmdWaitMode enum to SendCommandBlockMode and correct caps of values. SendCommandBlockMode::none is still lowercase due to python reserved word.
 - Fwu    : Add overloads to allow passing in an already-opened HAL InputFile
 - Cli    : Add support
 - C#     : Add support
 - Matlab : Add support

0.6.1
 - Fwu    : Increase bootloader entering reliability
 - Fwu    : Add factory reset at the beginning of a firmware update
 - Fwu    : Add ability to recover sensor booted from corrupted firmware file
 - Global : Fix bug causing a crash when attempting to copy more than 500 bytes in one loop to skipped or received byte buffer
 - Global : Increase default max bytes per loop to copy to 1000 bytes (skippedReceivedByteBufferMaxPutLength)
 - Global : Correct Windows serial flush
 - Cpp    : Fix SBL polling response reading

0.6.0
 - Global : Parsing appended fields in Ascii Messages no longer aborts for an invalid character
 - Cpp    : Replaced std::filesystem references with HAL FileIO
 - Global : Fixed bug causing long registers fail to read
 - Cpp    : Split debug out to different levels
 - Global : Remove compiling CompositeData with GnssSatInfo by default, add compiling GnssStatus and GnssAltMsl
 - Cpp    : Add Quat class
 - Cpp    : Expand SetInitialHeading definition to accept ypr or quat
 - Global : Reduce CPU usage when packet finding in loop
 - Cpp    : Add activeSerial and Poll options to register 5, 6, 7 SerialPort, implement in Sensor::changeBaudrate
 - Cpp    : Add profiling macros
 - Global : Reduce default mainBufferCapacity, fbBufferCapacity, CompositeDataQueueCapacity, and asyncErrorQueueCapacity
 - Cpp    : Clean bytebuffer methods
 - Cpp    : Allow ByteBuffer to be allocated on the stack rather than heap only
 - Cpp    : Add implementation for subscribing to Ascii packet
 - Cpp    : Changed register alias to pascal casing (ById::reg5 -> ById::Reg5)
 - Cpp    : Reorganize config parameters
 - Global : Increase default faPacketMaxLength to 2000
 - Global : Increase default asciiMaxFieldCount to 34
 - Global : Increase default numBytesToReadPerGetData to 2000
 - Global : Decrease default commandSendTimeoutLength and getMeasurementTimeoutLength to 100ms
 - Global : Implement fa packet max size check in packet finding
 - Global : Fix bug causing causing occasional connection failures after switching baudrates

0.5.0
 - Cpp    : Remove capacity for SDK to throw exceptions
 - Global : Rename all register enum values from camelCase with "_t" suffix to PascalCase without type suffix (i.e. serialPort_t -> SerialPort)
 - Global : Rename CompositeData data members from PascalCase to camelCase (i.e. compositeData.imu.Accel->compositeData.imu.accel)
 - Global : Remove SerialPortOpen error
 - Global : Add UnsupportedBaudrate, SerialReadFailed, SerialWriteFailed, MessageSubscriberCapacityReached errors
 - Global : Rename UnexpectedError to UnexpectedSerialError, NoMeasurementQueuePutSlotsAvailable to MeasurementQueueFull
 - Cpp    : Change all relevant public Sensor methods to return an Error rather than VOID_OR_BOOL
 - Cpp    : Rework all asynchronous errors to be placed on the new Asynchronous Error Queue alongside unexpected messages
 - Cpp    : Rename Sensor::getUnexpectedQueueSize and Sensor::getUnexpectedMessage to Sensor::asynchronousErrorQueueSize and Sensor::getAsynchronousError
 - Python : Update documentation to describe exception behavior
 - Cpp    : Change all serial methods to return an Error where they previously returned bool
 - Global : Minor serial reliability improvements
 - Global : Fix bug causing exception when attempting to change to an unsupported baud rate
 - Global : Fix bug causing exception when calling Sensor::disconnect when already disconnected
 - Cpp    : Add FileIO HAL
 - Cpp    : Remove unused index member in Composite Data class
 - Cpp    : Pull Serial flush from being a public method
 - Global : Add verifySensorConnectivity and autoconnect at the end of Sensor::Reset for robustness
 - Fwu    : Support legacy VN-300 bootloader switch commands

0.4.1
 - Python : Add support for firmware update plugin with documentation
 - Cpp    : Add conversions plugin

0.4.0
 - Global : Remove "_t" suffix from aliases, including PortName, AsciiHeader, CompositeDataQueuReturn, and AsciiMessage
 - Global : Rename Sensor::Baudrates alias to Sensor::Baudrate
 - Cpp    : Added firmware update plugin and related documentation
 - Cpp    : Add Set Boot Loader command definition for firmware update, with Sensor method call
 - Cpp    : Add serialSend method for firmware update
 - Cpp    : Add changeHostBaudrate method for firmware update
 - Global : In Sensor::RestoreFactorySettings, add a serial flush before changing baud rate to ensure stability
 - Global : Add packet finding for ASCII messages ending with only \n for firmware update
 - Global : Increased default messageMaxLength to 280 to accommodate longer firmware update messages
 - Cpp    : Minor utility method additions
 - Global : Fix bug where known, unparsable ASCII measurements were interpreted as command responses
 - Global : Fix bug where commands popped from response queue before timing out were failing to throw ResponseTimout
 - Global : Fix bug where Command::getError would report an error when the response did not begin with VNERR
 - Global : Add thread sleep after changing baud rate to allow sensor time to reconfigure
 - Global : Linux serial performance and reliability improvements
 - Global : Require full reg ID is in read/write register response when using 3-digit reg ID
 - Global : Minor cleaning
 - Cpp    : Added new byte buffer get method to output to linear c-array

0.3.0
 - ROS    : Add ROS2 plugin
 - Global : Restore full INS group to be included in Composite Data by default
 - Global : Fix bug causing many common group measurements to be parsed incorrectly
 - Global : Add integrity check to fa packet parsing, ensuring full found packet is consumed
 - Global : Add and implement CirularBufferMutexed to fix prior thread safety issues
 - Global : Fix bug causing Binary Output Register's write register commands to receieve a VNERR when used with extension type bits
 - Global : Package Debug.hpp
 - MATLAB : Added support
 - Cpp    : Various minor cleaning

0.2.2
 - Global : Update Config.hpp and all CMakeLists to allow configuration of exception and thread enabling (for integration with CI)
 - Global : Pull parsing to CD from primary parsePacket method to a bound function pointer
 - Cpp    : Create new Debug.hpp, which wraps assert, abort, and debug statements. Implemented in all std::cout, abort, assert statements. Removed DEBUG_COMMS.
 - Global : Many (theoritically) non-impactful changes to resolve compiler warnings on gcc and clang when compiled -wall and -wextra
 - Global : Add GNSS3 status and altMSL from  measurement byte widths
 - Global : Add group bit offset  16 and 20 measurement byte widths for binary packet finding
 - MBED   : Add HAL files for MBED integration
 - Cpp    : Add cpp documentation
 - Python : Update python documentation and formatting
 - Cpp    : Update examples to work with exceptions disabled
 - Cpp    : Simplify Commands example checking response
 - Cpp    : Rename Sensor::EnabledBaudrates_t to Sensor::Baudrates
 - Cpp    : Change Sensor::Connect return type from VOID_OR_BOOL to bool
 - Cpp    : Change Sensor::autoConnect return type to always be std::optional<Baudrates>
 - Global : Windows serial performance improvement
 - Global : Linux serial performance improvement
 - Gloabl : Add capacity to write Reg 99 to each individual sensor, if enabled
 - Global : Fix bug in a couple registers which read a value from sensor as hex
 - Regscan: Add support to poll reg 99 as each individual GNSS receiver, if firmware enabled
 - Regscan: Stability improvements
 - Global : Correct sleep behavior when sending commands via Sensor API

0.2.1
 - Fa packet finding no longer aborts upon a validated packet with an unrecognized measurement datatype
 - Fix INS' bit offset 11 and 12 measurement byte width for binary packet finding
 - Add group bit offset 17 measurement byte widths for binary packet finding
 - Expand EnabledMeasurements to size 19 to accommodate binary group 17
 - Fix GNSS3_GROUP_ENABLE in Config.hpp EnabledMeasurements
 - Support more than 2 extension measurement groups and types in fa packet finding

0.2.0
 - Initial release
