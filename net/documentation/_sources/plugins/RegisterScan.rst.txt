.. _cliRegisterScanPage:

Register Scan
#############
The Register Scan plugin provides functionality to load a previously saved configuration file onto a VectorNav unit or to save the current configuration of a VectorNav unit into a configuration file. It can save any subset of configuration registers, and can optionally save only user-edited values. It contains prewritten methods to work with XML files (which are interoperable with Control Center) and ASCII files.

.. .. note::
..     The Register Scan plugin makes use of abstract template interfaces, :class:`~VN::RegisterScan::ConfigReader` and :class:`~VN::RegisterScan::ConfigWriter`, to establish a consistent protocol for accessing and storing sensor configurations while supporting multiple file formats and custom implementation strategies.

Usage
=====
The VNSDK provides three different examples demonstrating use of the Register Scan plugin: Load Configuration, Save Configuration, and Save Non-Default Configuration. The Load Configuration example details how to upload a previously saved configuration file to a VectorNav unit. The Save Configuration example shows how to save all the configuration settings from the unit to a file. The Save Non-Default Configuration example walks through how to save only the registers that have been changed from the factory default settings to a file.

As demonstrated in each of the Register Scan examples, to use the Register Scan plugin it is first necessary to create a :class:`~VNSDK::Sensor` object and connect to the VectorNav unit using the :func:`~VNSDK::Sensor::AutoConnect` method.

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/LoadConfiguration/LoadConfiguration.cs
        :language: C#
        :start-at: Sensor sensor
        :end-before: sensor.ConnectedBaudRate()
        :dedent: 12

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/LoadConfiguration/LoadConfiguration.m
        :language: matlab
        :start-at: if exist('sensor','var')
        :end-before: sensor.ConnectedBaudRate()

Loading a Configuration File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To load a previously saved configuration file onto a VectorNav unit using the Register Scan plugin, a configuration reader object that corresponds to the upload file type should be created. For example, to upload a previously saved XML configuration file to a VectorNav unit, a :class:`RegisterScan::XmlConfigReader <VNSDK::RegisterScan::XmlConfigReader>` object should be created.

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/LoadConfiguration/LoadConfiguration.cs
        :language: C#
        :start-at: RegisterScan.XmlConfigReader
        :end-at: RegisterScan.XmlConfigReader
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/LoadConfiguration/LoadConfiguration.m
        :language: matlab
        :start-at: VNSDK.('RegisterScan+XmlConfigReader')
        :end-at: VNSDK.('RegisterScan+XmlConfigReader')
        :dedent: 4

Alternatively, to upload a previously saved text file of configuration settings onto a VectorNav unit, a :class:`RegisterScan::AsciiConfigReader <VNSDK::RegisterScan::AsciiConfigReader>` object should be created instead.

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/LoadConfiguration/LoadConfiguration.cs
        :language: C#
        :start-at: RegisterScan.AsciiConfigReader
        :end-at: RegisterScan.AsciiConfigReader
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/LoadConfiguration/LoadConfiguration.m
        :language: matlab
        :start-at: VNSDK.('RegisterScan+AsciiConfigReader')
        :end-at: VNSDK.('RegisterScan+AsciiConfigReader')
        :dedent: 4

.. The Register Scan plugin can also upload any user-defined configuration settings to the VectorNav unit. To do this, define the ASCII messages and create a :class:`RegisterScan::GenericConfigReader <VN::RegisterScan::GenericConfigReader>` object. For example:

.. .. code-block:: cpp
    
..     std::vector<AsciiMessage> messages{"$VNRRG,06,1,1*0865", "$VNRRG,07,1,1*A234", "$VNRRG,75,3,400,01,0321*3B31"};
..     RegisterScan::GenericConfigReader configReader(
..         [&messages, &messageCount](AsciiMessage& msg)
..         {
..             if (messageCount < messages.size())
..             {
..                 msg = messages[messageCount];
..                 messageCount++;
..                 return Error::None;
..             }
..             else { return Error::FileReadFailed; }
..         });


Once the configuration reader object has been created, it should be passed to the respective :func:`RegisterScan::LoadConfiguration() <VNSDK::RegisterScan::LoadConfiguration>` method along with the :class:`~VNSDK::Sensor` object as follows:

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/LoadConfiguration/LoadConfiguration.cs
        :language: C#
        :lines: 94-99
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/LoadConfiguration/LoadConfiguration.m
        :language: matlab
        :lines: 72-76

.. warning:: 
    The :func:`RegisterScan::LoadConfiguration() <VNSDK::RegisterScan::LoadConfiguration>` method will first issue a Restore Factory Settings command to the VectorNav unit before attempting to load the user-defined configuration settings onto the unit. This means any previously configured settings on the unit that were not captured in the configuration file will be lost and only the settings included in the configuration file will be configured on the unit. If performing a Restore Factory Settings command is not desired, the :func:`RegisterScan::SetConfigurationRegisters() <VNSDK::RegisterScan::SetConfigurationRegisters>` method should instead be used to load the user-defined settings onto the unit.

    .. tab:: C#

        .. code-block::  C#
        
            RegisterScan.SetConfigurationRegisters(sensor, configReader);

    .. tab::  MATLAB

        .. code-block:: matlab
        
            RegisterScan.SetConfigurationRegisters(sensor, configReader);


.. note::
    After loading the settings from a previously saved configuration file onto a VectorNav unit, the :func:`RegisterScan::LoadConfiguration() <VNSDK::RegisterScan::LoadConfiguration>` method issues a Write Settings command followed by a Reset command to the unit. This ensures all configured settings are saved to the non-volatile memory of the unit and starts the unit up fresh with the configured settings.

Saving a Configuration File
^^^^^^^^^^^^^^^^^^^^^^^^^^^
In many cases, it is useful to have the current configuration of a VectorNav unit, such as to confirm that the desired settings have been applied to the sensor or to configure multiple sensors with the same configuration settings. The :func:`RegisterScan::SaveConfiguration() <VNSDK::RegisterScan::SaveConfiguration>` method within the Register Scan plugin allows the user to save the current values of all configuration registers on a unit into a configuration file. To do so, a configuration writer object that corresponds to the desired output file type should be created. For example, to save the current configuration into an XML file, a :class:`RegisterScan::XmlConfigWriter <VNSDK::RegisterScan::XmlConfigWriter>` object should be created.

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/SaveConfiguration/SaveConfiguration.cs
        :language: C#
        :start-at: RegisterScan.XmlConfigWriter
        :end-at: RegisterScan.XmlConfigWriter
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/SaveConfiguration/SaveConfiguration.m
        :language: matlab
        :start-at: VNSDK.('RegisterScan+XmlConfigWriter')
        :end-at: VNSDK.('RegisterScan+XmlConfigWriter')
        :dedent: 4

Alternatively, to save a configuration file into a text file, a :class:`RegisterScan::AsciiConfigWriter <VNSDK::RegisterScan::AsciiConfigWriter>` object should be created. 

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/SaveConfiguration/SaveConfiguration.cs
        :language: C#
        :start-at: RegisterScan.AsciiConfigWriter
        :end-at: RegisterScan.AsciiConfigWriter
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/SaveConfiguration/SaveConfiguration.m
        :language: matlab
        :start-at: VNSDK.('RegisterScan+AsciiConfigWriter')
        :end-at: VNSDK.('RegisterScan+AsciiConfigWriter')
        :dedent: 4
        
.. For custom configuration output handling, a :class:`RegisterScan::GenericConfigWriter <VN::RegisterScan::GenericConfigWriter>` object can be implemented.

.. .. code-block:: cpp
    
..     RegisterScan::GenericConfigWriter writer(
..         [](const AsciiMessage& msg)
..         {
..             std::cout << msg.c_str();
..             return Error::None;
..         });

Once the configuration writer object has been created, it should be passed to the :func:`RegisterScan::SaveConfiguration() <VNSDK::RegisterScan::SaveConfiguration>` method along with the :class:`~VNSDK::Sensor` object as follows:

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/SaveConfiguration/SaveConfiguration.cs
        :language: C#
        :lines: 78-87
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/SaveConfiguration/SaveConfiguration.m
        :language: matlab
        :lines: 68-73

The user can also optionally pass a custom filter to the :func:`RegisterScan::SaveConfiguration() <VNSDK::RegisterScan::SaveConfiguration>` method to specify which registers to include or exclude when saving the configuration. For example:

.. tab:: C#

    .. code-block::  C#
    
        RegisterScan.SaveConfigurationFilter filter = new RegisterScan.SaveConfigurationFilter();
        filter.type = RegisterScan.SaveConfigurationFilter.Type.Include;
        filter.list = RegisterScan.GetDefaultConfigRegisters();

.. tab::  MATLAB

    .. code-block:: matlab
	
        filter = VNSDK.('RegisterScan+SaveConfigurationFilter')();
        filter.type = VNSDK.('RegisterScan+SaveConfigurationFilter+Type').Include;
        filter.list = RegisterScan.GetDefaultConfigRegisters();

Saving a Non-Default Configuration File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
While calling the :func:`RegisterScan::SaveConfiguration() <VNSDK::RegisterScan::SaveConfiguration>` method saves the current configuration settings on the VectorNav unit, the output configuration file from this method contains the values of all configuration settings on the sensor, even those that were not modified by the user and remained at the factory default values. The :func:`RegisterScan::SaveNonDefaultConfiguration() <VNSDK::RegisterScan::SaveNonDefaultConfiguration>` method within the Register Scan plugin allows the user to save only the configuration settings on the unit that differ from the factory default values. This creates a more concise configuration file that contains only the changes made by the user, allowing the user to more easily confirm that the desired settings were applied to the unit. It is also particularly useful when transferring configurations between multiple devices, as it only transfers the necessary changes rather than the entire configuration.

.. warning::
    As part of the :func:`RegisterScan::SaveNonDefaultConfiguration() <VNSDK::RegisterScan::SaveNonDefaultConfiguration>` method, a Restore Factory Settings command will be issued to the VectorNav unit. When using this method, it is highly recommended to monitor the progress of this call as any errors encountered could mean that the settings previously configured were not able to be reapplied onto the unit. If performing a Restore Factory Settings command is not desired, the :func:`RegisterScan::SaveConfiguration() <VNSDK::RegisterScan::SaveConfiguration>` method should instead be used to save the current configuration of a VectorNav unit.

To save the current non-default configuration into an XML file, a :class:`RegisterScan::XmlConfigWriter <VNSDK::RegisterScan::XmlConfigWriter>` object should be created. 

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/SaveNonDefaultConfiguration/SaveNonDefaultConfiguration.cs
        :language: C#
        :start-at: RegisterScan.XmlConfigWriter
        :end-at: RegisterScan.XmlConfigWriter
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/SaveNonDefaultConfiguration/SaveNonDefaultConfiguration.m
        :language: matlab
        :start-at: VNSDK.('RegisterScan+XmlConfigWriter')
        :end-at: VNSDK.('RegisterScan+XmlConfigWriter')
        :dedent: 4

Alternatively, to save a non-default configuration file into a text file, a :class:`RegisterScan::AsciiConfigWriter <VNSDK::RegisterScan::AsciiConfigWriter>` object should be created. 

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/SaveNonDefaultConfiguration/SaveNonDefaultConfiguration.cs
        :language: C#
        :start-at: RegisterScan.AsciiConfigWriter
        :end-at: RegisterScan.AsciiConfigWriter
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/SaveNonDefaultConfiguration/SaveNonDefaultConfiguration.m
        :language: matlab
        :start-at: VNSDK.('RegisterScan+AsciiConfigWriter')
        :end-at: VNSDK.('RegisterScan+AsciiConfigWriter')
        :dedent: 4

.. For custom configuration output handling, a :class:`RegisterScan::GenericConfigWriter <VN::RegisterScan::GenericConfigWriter>` object can be implemented.

.. .. code-block:: cpp
    
..     RegisterScan::GenericConfigWriter writer(
..         [](const AsciiMessage& msg)
..         {
..             std::cout << msg.c_str();
..             return Error::None;
..         });

Once the configuration writer object has been created, it should be passed to the :func:`RegisterScan::SaveNonDefaultConfiguration() <VNSDK::RegisterScan::SaveNonDefaultConfiguration>` method along with the :class:`~VNSDK::Sensor` object as follows:

.. tab:: C#

    .. literalinclude:: ../../../cs/examples/RegisterScan/SaveNonDefaultConfiguration/SaveNonDefaultConfiguration.cs
        :language: C#
        :lines: 81-86
        :dedent: 16

.. tab::  MATLAB

    .. literalinclude:: ../../../matlab/examples/RegisterScan/SaveNonDefaultConfiguration/SaveNonDefaultConfiguration.m
        :language: matlab
        :lines: 72-76
	
API
===

The CLI API for the Register Scan plugin is modeled from the C++ API which can be found here:
:ref:`RegisterScan <plugins_cpp:namespace_VN__RegisterScan>`
