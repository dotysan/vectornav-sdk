Firmware Update
###############

The Firmware Update plugin contains everything necessary to update the firmware on a VectorNav unit. For most use cases, a single call to the :func:`VNSDK::FirmwareUpdater::UpdateFirmware` method is all that is required. This method is overloaded to accept either a list of VNX files or a file path to a single VNXML file and is the preferred approach for updating the firmware on a VectorNav unit.

.. note::
    This plugin will work with any sensor which accepts the Set Boot Loader command. Additional information on the firmware update process can be found in the Firmware Update Protocol technical note. Please reach out to support@vectornav.com to obtain the VNX or VNXML file(s) for your specific sensor.


Usage
=====

.. warning::
    As a part of the firmware update, this plugin will issue a Restore Factory Settings. To ensure preservation of configuration settings, it is recommended to perform a register scan before updating the firmware version. Information on how to perform a register scan can be found on the :ref:`RegisterScanPage` page.

As demonstrated in the Firmware Update example, to use the Firmware Update plugin it is first necessary to create a :class:`VNSDK::Sensor` object and connect to the VectorNav unit using the :func:`VNSDK::Sensor::Connect` method. A :class:`VNSDK::FirmwareUpdater` object should also be created.

.. tab:: C#

    .. code-block::  C#
    
        Sensor sensor = new Sensor();
        sensor.Connect(PortName, firmwareBaudRate);
        FirmwareUpdater firmwareUpdater = new FirmwareUpdater();

.. tab::  MATLAB

    .. code-block:: matlab

        sensor = Sensor();
        sensor.Connect(port_name, firmwareBaudRate);
        firmwareUpdater = FirmwareUpdater();

.. note::
    Because it cannot be assumed that the sensor has a valid firmware, connecting using the :func:`VNSDK::Sensor::AutoConnect` method or verifying connectivity using the  :func:`VNSDK::Sensor::VerifySensorConnectivity` method are not recommended.

Next, the file path(s) for the firmware file(s) need to be specified and passed to the :func:`VNSDK::FirmwareUpdater::UpdateFirmware` method. Either a relative file path or an absolute file path can be used. Additionally, in the :func:`VNSDK::FirmwareUpdater::UpdateFirmware` call, the firmware baud rate and bootloader baud rate can be specified as input parameters. The default value for each is 115200 bps. 

.. note::
    To speed up the firmware update, the bootloader can be set to update at higher rates (maximum of 460800 bps) using the ``bootloaderBaudRate`` parameter.

To update a VectorNav unit using a VNXML file, a ``String`` object should be used:

.. tab:: C#

    .. code-block:: C#
    
        string vnxmlPath = "VN310.vnxml";
        FirmwareUpdater.Params fwUpdateParams = new FirmwareUpdater.Params(firmwareBaudRate, bootloaderBaudRate);
        firmwareUpdater.UpdateFirmware(ref sensor, vnxmlPath, fwUpdateParams);

.. tab:: MATLAB

    .. code-block:: matlab

        vnxml_path = 'VN310.vnxml';
        params = VNSDK.('FirmwareUpdater+Params')(firmwareBaudRate, bootloaderBaudRate);
        firmwareUpdater.UpdateFirmware(sensor, vnxml_path, params);

Alternatively, to update using individual VNX files, a ``List`` of :type:`VNSDK::FirmwareUpdater::FirmwareFile` objects must be created. This object is a list of VNX firmware files and their associated processor to which to upload the firmware. If multiple VNX files are listed, the firmware will be updated as ordered by this list.

.. tab:: C#

    .. code-block:: C#
    
        List<FirmwareUpdater.FirmwareFile> files = new List<FirmwareUpdater.FirmwareFile>();
        FirmwareUpdater.FirmwareFile navFile = new FirmwareUpdater.FirmwareFile(FirmwareUpdater.Processor.Nav, navVnxPath);
        files.Add(navFile);
        FirmwareUpdater.FirmwareFile gnssFile = new FirmwareUpdater.FirmwareFile(FirmwareUpdater.Processor.Gnss, gnssVnxPath);
        files.Add(gnssFile);
        firmwareUpdater.UpdateFirmware(ref sensor, files, fwUpdateParams);

.. tab:: MATLAB

    .. code-block:: matlab

        import System.Collections.Generic.*;
        files = NET.createGeneric('System.Collections.Generic.List', {'VNSDK.FirmwareUpdater+FirmwareFile'}, 0);
        navFile = VNSDK.('FirmwareUpdater+FirmwareFile')(VNSDK.('FirmwareUpdater+Processor').Nav, Nav);
        files.Add(navFile);
        gnssFile = VNSDK.('FirmwareUpdater+FirmwareFile')(VNSDK.('FirmwareUpdater+Processor').Gnss, Gnss);
        files.Add(gnssFile);
        firmwareUpdater.UpdateFirmware(sensor, files, params);

Command Line 
^^^^^^^^^^^^

The Firmware Update example can also be run as a command-line executable, with the usage defined as:

.. tab:: C#
   
      .. literalinclude:: ../../../cs/examples/FirmwareUpdate/FirmwareUpdate.cs
         :language: c#
         :start-at: usage =
         :end-at: ;
         :dedent: 12

.. tab:: MATLAB

      .. code-block:: matlab

        usage = matlab -batch "[port_name='{port_name};'] [{Processor}='{file_path};'... | vnXml='{file_path}; firmwareBaudRate=<firmware baudrate>; bootloaderBaudRate=<bootloader baudrate>;'] FirmwareUpdate";

For example, the command line can be used as

.. tab:: C#

    .. code-block:: 
    
        >> ./FirmwareUpdate.exe --PortName=COM8 --Nav=./VN310NavFirmware.vnx --Imu=./VN310IMUFirmware.vnx --Gnss=./VN310GnssFirmware.vnx  --firmwareBaudRate=115200 --bootloaderBaudRate=460800

.. tab:: MATLAB

    .. code-block:: matlab

        >> matlab -batch "port_name='COM8'; Nav='./VN310NavFirmware.vnx'; Imu='./VN310IMUFirmware.vnx'; Gnss='./VN310GnssFirmware.vnx'; firmwareBaudRate=115200; bootloaderBaudRate=460800; FirmwareUpdate"

would connect to the sensor using the port COM8 at default 115200 bps, upload the selected NAV firmware file, then the IMU firmware file, then the GNSS firmware file. Each firmware update would occur at the bootloaderBaudRate of 460800 bps.

API
===

The CLI API for the Firmware Update plugin is modeled from the C++ API which can be found here :ref:`plugins_cpp:cppfirmwareupdateapi`.