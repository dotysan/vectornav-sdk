Migration Guide
###############
.. _MigrationGuideCLI:

This CLI migration guide highlights the changes between VectorNav's Programming Library and VectorNav's Software Development Kit (SDK) for CLI/.NET applications. This guide is not a how-to guide but rather a document of new features and changes between the two software package to ensure a smooth transition for users migrating from the Programming Library to the SDK. As discussed throughout this document, the fundamental way to interface with the sensor is the same across the two software packages but many features have been updated, and the performance has improved significantly in the SDK. 

Notable Changes and Features
============================

Highlights
^^^^^^^^^^
* Significant performance improvements
* High-rate data stability (can output above 200 Hz)
* Ability to catch exceptions
* Added measurements and registers
* Ability to log raw serial data
* New plugin support (For a list of available plugins in the VNSDK, see `Plugin List`_)
* Compatibility with FB packets


Configuration File
^^^^^^^^^^^^^^^^^^
The DLL provided was compiled using the settings configured in the ``cpp/include/vectornav/Config.hpp`` file. These settings were optimized to work well on a wide range of platforms from embedded systems to desktop computers. Since Windows systems do not typically have the same memory constraints as an embedded system, it may be desired to modify these configuration settings, such as to increase buffer sizes. To do so, the user would need to configure the desired settings in the ``Config.hpp`` file and recompile the DLL.

Migrating from the VectorNav Programming Library to the VNSDK
=============================================================
The CLI SDK wraps the C++ SDK using `C++/CLI <https://learn.microsoft.com/en-us/cpp/dotnet/dotnet-programming-with-cpp-cli-visual-cpp?view=msvc-170>`_ to provide a .NET-accessible DLL file for use in MATLAB or C#. This migration guide provides the basic communication differences between the VNSDK and the Programming Library for MATLAB and C#.

Naming Conventions
^^^^^^^^^^^^^^^^^^

The CLI wrapper follows .NET naming conventions, which are consistent between C# and MATLAB when using the .NET assembly:

- **Classes**, **structures**, and **method names** are written in **PascalCase**. To illustrate, classes are written as ``VNSDK.Registers.Attitude.YawPitchRoll``, and sensor methods are written as ``sensor.ReadRegister()``.

- **Enumeration values** and **constants** are also written in **PascalCase** and scoped within their parent type. For example, enums are written as ``AsyncOutputType.Ador.YPR`` and ``BaudRate.BaudRates.BaudBaud115200``.

- **Data member accessors** and **variable accessors** uses **camelCase**. For example, accessing register data is written as ``yprRegister.yaw``, and composite data as ``compositeData.Value.imu.accel.Value``.

- **Nested enumeration access** in MATLAB requires special syntax due to .NET interoperability. As an example, MATLAB uses ``Registers.System.('AsyncOutputType+Ador').YPR`` while C# uses ``AsyncOutputType.Ador.YPR``.


Error Handling
^^^^^^^^^^^^^^
Before explaining how to read and write registers, the user should know the differences in handling errors between the two software packages. The VNSDK provides significantly improved error handling compared to the Programming Library through proper .NET exception
management and native C++/CLI interoperability. The Programming Library was unable to catch exceptions through the language barrier, causing a crash on any exception thrown in C++,
regardless of whether it was supposed to be caught in C# or MATLAB. The VNSDK C++ library does not throw exceptions; it instead returns error codes which are propagated to the CLI code and thrown natively in C# or MATLAB. Because of this, all exceptions can be caught as native C# or MATLAB exceptions.

.. tab:: C#

    .. code-block::  csharp

        // VNSDK
        try
        {
            sensor.ReadRegister(modelRegister);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"VectorNav Error: {ex.Message");
        }

.. tab::  MATLAB

    .. code-block::  matlab

        % VNSDK
        try
            sensor.ReadRegister(modelRegister);
        catch latestError
            error('VectorNav Error: %s\n', latestError.message);
        end

Connecting to the Unit
^^^^^^^^^^^^^^^^^^^^^^^
For both software packages, the serial port name is strictly necessary to connect to the unit.
In the VectorNav Programming Library, the baud rate must also be known.
With the VNSDK, there is an option to specify the baud rate using the :func:`~VNSDK::Sensor::Connect` method, 
but a new :func:`~VNSDK::Sensor::AutoConnect` method is also available that will scan the specified port for the unit's baud rate.

To communicate with the unit, a sensor object must be created before a connection can be established.
In the VectorNav Programming Library this is done by

.. tab:: C#

    .. code-block::  csharp

        // VN Programming Library
        var vs = new VnSensor();
        vs.Connect(SensorPort, SensorBaudrate);

.. tab::  MATLAB

    .. code-block:: matlab

        % VN Programming Library
        ez = EzAsyncData.Connect(SensorComPort, SensorBaudRate);

While in the VNSDK, the unit is connected using the :func:`~VNSDK::Sensor::AutoConnect` method below:

.. tab:: C#

    .. code-block::  csharp

        // VNSDK
        Sensor sensor = new Sensor();
        sensor.AutoConnect(portName);

.. tab::  MATLAB

    .. code-block::  matlab
        
        % VNSDK
        sensor = Sensor();
        sensor.AutoConnect(portName);

    .. .. literalinclude::  ../../../matlab/examples/GettingStarted/GettingStarted.m
    ..     :linenos:
    ..     :lineno-match:
    ..     :language: matlab
    ..     :start-at: if exist('sensor','var')
    ..     :end-at: sensor.AutoConnect(port_name);

Accessing Registers
^^^^^^^^^^^^^^^^^^^
In the VectorNav Programming Library, a ``VnSensor`` object is created with each read or write register command as a method of that object. 
In the VNSDK, a :class:`~VNSDK::Sensor` object is still created for interaction, but the approach is now streamlined to use only two primary methods: 
:func:`~VNSDK::Sensor::ReadRegister` for reading data from :class:`~VNSDK::Registers::ConfigRegister` or :class:`~VNSDK::Registers::MeasRegister` objects and :func:`~VNSDK::Sensor::WriteRegister()` for writing data to :class:`~VNSDK::Registers::ConfigRegister` objects.
Each register is now represented as its own managed class (inheriting from :class:`~VNSDK::Registers::ConfigRegister` or :class:`~VNSDK::Registers::MeasRegister`) and gets populated 
when a :func:`~VNSDK::Sensor::ReadRegister` or :func:`~VNSDK::Sensor::WriteRegister` request is sent.

Reading Registers
-----------------
Using the Programming Library, the user would create a VnSensor object and call the respective read register method.
For example, the following code reads the *Yaw, Pitch, Roll* register (Register 8) using the Programming Library.

.. tab:: C#
    
    .. code-block:: csharp

        // VN Programming Library
        var ypr = vs.ReadYawPitchRoll();

.. tab:: MATLAB

    .. code-block:: matlab

        % VN Programming Library
        ez.Sensor.ReadYawPitchRoll();

In the VNSDK, the user creates the :class:`~VNSDK::Sensor` object and passes a pointer to a Register object they would like to read to the :func:`~VNSDK::Sensor::ReadRegister` method like in the example below:

.. tab:: C#

    .. code-block:: csharp

        // VNSDK
        VNSDK.Registers.Attitude.YawPitchRoll yprRegister = new VNSDK.Registers.Attitude.YawPitchRoll();
        sensor.ReadRegister(yprRegister);

    .. .. literalinclude:: ../../../cs/examples/GettingStarted/GettingStarted.cs
    ..     :linenos:
    ..     :lineno-match:
    ..     :language: c#
    ..     :start-at: VNSDK.Registers.Attitude.YawPitchRoll
    ..     :end-at: (ypr);

.. tab:: MATLAB

    .. code-block:: matlab
        
        % VNSDK
        modelRegister = Registers.System.Model();
        sensor.ReadRegister(modelRegister);

    .. .. literalinclude:: ../../../matlab/examples/GettingStarted/GettingStarted.m
    ..     :linenos:
    ..     :lineno-match:
    ..     :language: matlab
    ..     :start-at: ypr = Registers.Attitude.YawPitchRoll();
    ..     :end-at: (ypr);

Writing Registers
-----------------
Writing to a register incorporates the same changes as reading a register.
The following examples show the difference between writing to the Asynchronous Data Output Frequency register (Register 7) in the Programming Library and the VNSDK.
To configure the VectorNav Programming Library to output at the frequency of 2 Hz, the user would create the VnSensor object and then write to the Asynchronous Data Output Frequency register:

.. tab:: C#

    .. code-block:: csharp

        // VN Programming Library
        vs.WriteAsyncDataOutputFrequency(2);

.. tab:: MATLAB

    .. code-block:: matlab

        % VN Programming Library
        ez.Sensor.WriteAsyncDataOutputFrequency(2);

In the VNSDK, a Register object has to be created and passed to the :func:`~VNSDK::Sensor::WriteRegister` method, much like reading a register.

.. tab:: C#

    .. code-block:: csharp

        // VNSDK
        VNSDK.Registers.System.AsyncOutputFreq asyncDataOutputFrequency = new VNSDK.Registers.System.AsyncOutputFreq();
        asyncDataOutputFrequency.adof = VNSDK.Registers.System.AsyncOutputFreq.Adof.Rate2Hz;
        asyncDataOutputFrequency.serialPort = VNSDK.Registers.System.AsyncOutputFreq.SerialPort.Serial1;
        sensor.WriteRegister(asyncDataOutputFrequency);

    .. .. literalinclude:: ../../../cs/examples/GettingStarted/GettingStarted.cs
    ..     :linenos:
    ..     :lineno-match:
    ..     :language: c#
    ..     :start-at:  String messageType
    ..     :end-at:  (asyncOutputType);
    
.. tab:: MATLAB

    .. code-block:: matlab

        % VNSDK
        asyncDataOutputFrequency = Registers.System.AsyncOutputFreq();
        asyncDataOutputFrequency.adof = Registers.System.('AsyncOutputFreq+Adof').Rate2Hz;
        asyncDataOutputFrequency.serialPort = Registers.System.('AsyncOutputFreq+SerialPort').Serial1;
        sensor.WriteRegister(asyncDataOutputFrequency);
        
    .. .. literalinclude:: ../../../matlab/examples/GettingStarted/GettingStarted.m
    ..     :linenos:
    ..     :lineno-match:
    ..     :language: matlab
    ..     :start-at: availableEnums
    ..     :end-at: (asyncDataOutputType);

Extracting Asynchronous Data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In the Programming Library, two approaches exist to extract asynchronous measurements: using callbacks to parse and consume a raw packet and using a ``CompositeData`` object with the ``EzAsyncData`` class. Because the VNSDK is tightly integrated with its :class:`~VNSDK::CompositeData` class, this section outlines how to migrate between ``CompositeData`` classes.


The :class:`~VNSDK::CompositeData` Class
----------------------------------------

Both the Programming Library and VNSDK provide a ``CompositeData`` class that are reasonably similar to each other. In both codebases, each ``CompositeData`` object allocates memory 
for every possible measurement output from the unit, optionally containing a subset of those measurements. The Programming Library's ``CompositeData`` class maintains public data members, getters, setters, and present booleans. The VNSDK's :class:`~VNSDK::CompositeData` only contains public data members, instead opting to report which variables are optionally ``None``. In this way, the Programming Library's ``CompositeData`` class feels more like a true class, whereas the VNSDK feels more like a data structure.

The first distinction is in organization between the two; the Programming Library's ``CompositeData`` contains each measurement type 
accessor by getter methods at the top level, whereas the VNSDK's :class:`~VNSDK::CompositeData` contains each measurement type directly accessible, organized in their respective 
binary groups, as defined by the Interface Control Document (ICD). For example, to access the ypr field in the Programming Library's ``CompositeData`` object would be accessed by 
``cd.YawPitchRoll()``, whereas using the SDK's :class:`~VNSDK::CompositeData` object would be ``cd.attitude.ypr``. 

The second distinction is in the reporting of updated or nonupdated
measurement types; the Programming Library's ``CompositeData`` provides ``Has`` methods (such as ``HasYawPitchRoll``) which return a bool of whether the requested measurement type is present.
The VNSDK's :class:`~VNSDK::CompositeData` object natively holds each measurement type inside a `Nullable<T> <https://docs.microsoft.com/en-us/dotnet/api/system.nullable-1>`_ 
(C#/.NET), eliminating the need for a separate method to check if it is present. For example, the presence of that same ypr measurement in the Programming Library would be validated
by ``cd.HasYawPitchRoll()``, whereas in the VNSDK would be validated by ``cd.attitude.ypr.HasValue`` (C#/.NET). There also are some minor measurement type name changes
(i.e. Programming Library's ``YawPitchRoll`` to VNSDK's ``ypr``), where the VNSDK's :class:`~VNSDK::CompositeData` naming will always match the latest ICD.

:class:`~VNSDK::CompositeData` Accessor Methods
----------------------------------

The Programming Library's ``VnSensor`` class does not natively handle ``CompositeData`` classes, so a separate class---`EzAsyncData`---has to handle parsing and reporting the objects.
In contrast, the VNSDK's :class:`~VNSDK::Sensor` class natively parses :class:`~VNSDK::CompositeData` objects and reports them to the user. Both ``EzAsyncData`` and 
:class:`~VNSDK::Sensor` produce exactly one ``CompositeData`` object per measurement message received from the unit.

The ``EzAsyncData`` class provides two methods to retrieve data: ``EzAsyncData::CurrentData`` and ``EzAsyncData::GetNextData``; the :class:`~VNSDK::Sensor` class provides 
:func:`~VNSDK::Sensor::GetNextMeasurement` and :func:`~VNSDK::Sensor::GetMostRecentMeasurement`.
The ``EzAsyncData`` class maintains only the latest measurement received, whereas the VNSDK maintains a queue of :class:`~VNSDK::CompositeData` objects. As such, there 
are some minor differences between the two codebases to note when accessing ``CompositeData`` objects.

In most cases---where the polling rate for the latest measurement data exceeds the unit's measurement output rate---a call to ``EzAsyncData::CurrentData`` is similar in use 
to non-blocking calls of both :func:`~VNSDK::Sensor::GetNextMeasurement` and :func:`~VNSDK::Sensor::GetMostRecentMeasurement`.
In these cases, ``EzAsyncData::CurrentData`` will repeatedly output a ``CompositeData`` object parsed from the most recent measurement packet, whereas the :class:`~VNSDK::Sensor` 
methods will output that :class:`~VNSDK::CompositeData` object only once. 
When the polling rate exceeds the output rate, ``EzAsyncData::NextData`` is nearly identical to a blocking call of both :func:`~VNSDK::Sensor::GetNextMeasurement` and 
:func:`~VNSDK::Sensor::GetMostRecentMeasurement`, but should probably be replaced with a blocking call to :func:`~VNSDK::Sensor::GetMostRecentMeasurement`.

When the user's measurement polling rate is less than the unit's measurement output rate, the presence of a :class:`~VNSDK::CompositeData` queue in the :class:`~VNSDK::Sensor` 
class is more apparent. In this case, ``EzAsyncData::CurrentData`` is identical to a non-blocking call of :func:`~VNSDK::Sensor::GetMostRecentMeasurement`.
While there is no direct analogue to ``EzAsyncData::NextData``, it is most similar to a blocking call of :func:`~VNSDK::Sensor::GetMostRecentMeasurement`, with the exception 
that :func:`~VNSDK::Sensor::GetMostRecentMeasurement` returns immediately if a measurement is present in the queue upon invocation---
``EzAsyncData::NextData`` necessarily blocks upon receipt of a measurement subsequent to the invocation.
In this case, ``EzAsyncData`` drops ``CompositeData`` objects parsed between polls, whereas :class:`~VNSDK::Sensor` maintains all :class:`~VNSDK::CompositeData` objects parsed 
(until the queue capacity is reached).
Consequently, the user can successively read all the measurement packets since their last poll using :func:`~VNSDK::Sensor::GetNextMeasurement` to prevent data loss.

The syntax to retrieve a ``CompositeData`` object is slightly different between the two codebases. The ``EzAsyncData`` methods return a ``CompositeData`` object by value, 
whereas, the :class:`~VNSDK::Sensor` methods return a `Nullable<CompositeData> 
<https://docs.microsoft.com/en-us/dotnet/api/system.nullable-1>`_ containing the :class:`~VNSDK::CompositeData` object of interest.
As such, the ``EzAsyncData`` methods are guaranteed to return an object, whereas the :class:`~VNSDK::Sensor` methods may return a null value if no object currently exists 
in the queue or the timeout has been exceeded. In the VectorNav Programming Library we can access ``CompositeData`` fields as

.. tab:: C#

    .. code-block::  csharp

        var cd = ez.CurrentData;
        if (!cd.HasYawPitchRoll)
            Console.WriteLine("YPR Unavailable.");
        else
            Console.WriteLine("Current YPR: {0}", cd.YawPitchRoll);

.. tab::  MATLAB

    .. code-block::  matlab

        if isempty(cd)
        fprintf('No data available.\n')
        else
            fprintf('YPR: %3.2f %3.2f %3.2f\n', cd.YawPitchRoll.X, cd.YawPitchRoll.Y, cd.YawPitchRoll. Z);
        end


whereas in the VNSDK they are accessed as

.. tab:: C#

    .. code-block::  csharp

        // VNSDK
        Nullable<CompositeData> compositeData = sensor.GetNextMeasurement();
        if (!compositeData.HasValue)
        {
            continue;
        }
        // safe to access
        if (compositeData.Value.MatchesMessage("VNYPR"))
        {
            var ypr = compositeData.Value.attitude.ypr.Value;
            Console.WriteLine($"Yaw- {ypr.yaw}, Pitch- {ypr.pitch}, Roll- {ypr.roll}");
        }

.. tab::  MATLAB

    .. code-block::  matlab
        
        % VNSDK
        compositeData = sensor.GetNextMeasurement();
        if isempty(compositeData)
            continue;
        end
        if compositeData.MatchesMessage("VNYPR")
            ypr = compositeData.attitude.ypr;
            fprintf('Yaw- %.6f, Pitch- %.6f, Roll- %.6f\n' , ypr.yaw, ypr.pitch, ypr.roll);
        end


Plugin List
===========

Firmware Programmer
^^^^^^^^^^^^^^^^^^^
While this plugin is available in the Programming Library, it has been updated with the issuance of the VNSDK.
The new Firmware Programmer plugin has the ability to accept both *VNX* and *VNXML* files, contains significant stability improvements, and has more flexible and simple syntax.
This plugin allows the users to update their unit's firmware without having to connect it to VectorNav's GUI, Control Center, or creating their own embedded updater.
All firmware updates must be performed over the main port, UART-1, and communication must be established before an update can occur.
More information on this plugin can be found in the :ref:`cliFirmwareProgrammerPage` section.

Register Scan
^^^^^^^^^^^^^
The Register Scan plugin is a newly added plugin unique to the VNSDK.
This plugin is capable of producing an XML or text file containing the non-default registers on the unit, or uploading an XML or text file of register values to the unit. It is similar to and interoperable with the "Save Config" and "Load Config" buttons on Control Center.
Additional information can be found on the :ref:`cliRegisterScanPage` page.

Logger
^^^^^^
The Logger plugin allows users to easily log all bytes received from the unit to a binary file without the need to parse the packets.
The Programming Library did not have any native capability to do this, and was most often accomplished by custom code utilizing the `RawDataReceivedHandler`.
More information on this plugin can be found in the :ref:`cliLoggerPage` section.

Data Export
^^^^^^^^^^^
The Data Export plugin can export data into formats such as a *CSV*, *TXT*, or *RINEX* file.
The plugin can handle data from either previously logged binary files or data directly from a VectorNav unit.
Additionally, it can handle outputting to multiple different formats at once.
More information on this plugin can be found in the :ref:`cliDataExportPage` section.

Math
^^^^
The Math plugin expands upon the Programming Library's previous vector and matrix math by also including data conversions and expanded linear algebra functions.
More information on this plugin can be found in the :ref:`cliMathPage` section.