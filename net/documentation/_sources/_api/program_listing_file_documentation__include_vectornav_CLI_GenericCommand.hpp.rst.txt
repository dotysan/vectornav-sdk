
.. _program_listing_file_documentation__include_vectornav_CLI_GenericCommand.hpp:

Program Listing for File CLI_GenericCommand.hpp
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_documentation__include_vectornav_CLI_GenericCommand.hpp>` (``documentation\_include\vectornav\CLI_GenericCommand.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_CLI_GENERICCOMMAND_HPP_
   #define VN_CLI_GENERICCOMMAND_HPP_
   
   #include "Windows.h"
   #include <conio.h>
   #include <msclr/marshal.h>
   
   #pragma managed(push, off)
   #include "vectornav/Interface/GenericCommand.hpp"
   #include "vectornav/Interface/Commands.hpp"
   #pragma managed(pop)
   
   #include <string>
   
   using namespace System;
   using namespace msclr::interop;
   
   namespace VNSDK
   {
        class GenericCommand
       {
       protected:
           VN::GenericCommand* _cmd;
   
       public:
           GenericCommand(VN::GenericCommand* cmd) : _cmd(cmd) {};
           ~GenericCommand() { delete _cmd; };
           VN::GenericCommand* GetReference() { return _cmd; };
   
           bool IsAwaitingResponse()  // The command queue has NOT yet popped this command
           {
               return _cmd->isAwaitingResponse();
           };
   
           bool HasValidResponse()    // This command has received a response that matches.
           {
               return _cmd->hasValidResponse();
           };
   
           Nullable<int> GetError()
           {
               std::optional<VN::Error> error = _cmd->getError();
               if (error.has_value()) { return Nullable<int>(static_cast<int>(error.value())); }
               else { return Nullable<int>(); }
           };
   
           String* GetResponse()
           {
               marshal_context* context = gcnew marshal_context();
               String* value = context->marshal_as<String*>(_cmd->getResponse().c_str());
               delete context;
               return value;
   
           };
   
       };
   }
   
   #endif  // VN_CLI_GENERICCOMMAND_HPP_
