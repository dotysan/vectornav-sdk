
.. _program_listing_file_documentation__include_vectornav_CLI_Registers.hpp:

Program Listing for File CLI_Registers.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_documentation__include_vectornav_CLI_Registers.hpp>` (``documentation\_include\vectornav\CLI_Registers.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_CLI_REGISTERS_HPP_
   #define VN_CLI_REGISTERS_HPP_
   
   #define NOMINMAX 1
   
   #include "CLI_GenericCommand.hpp"
   
   #include <msclr/marshal.h>
   
   #pragma managed(push, off)
   #include "vectornav/Interface/Registers.hpp"
   #pragma managed(pop)
   
   using namespace System;
   using namespace msclr::interop;
   
   namespace VNSDK
   {
   namespace Registers
   {
    class ConfigRegister
   {
       protected:
       VN::Register* _reg;
       
       public:
       ConfigRegister(VN::Register* reg) : _reg(reg) {};
       ~ConfigRegister() { delete _reg; };
       VN::Register* GetReference() { return _reg; };
       
       VNSDK::GenericCommand* ToReadCommand()
       {
           return gcnew VNSDK::GenericCommand(&_reg->toReadCommand());
       };
       
       VNSDK::GenericCommand* ToWriteCommand()
       {
           VN::ConfigurationRegister* configReg = dynamic_cast<VN::ConfigurationRegister*>(_reg);
           if (configReg != nullptr)
           {
               std::optional<VN::GenericCommand> writeCmd =  configReg->toWriteCommand();
               if (!writeCmd.has_value()) {
                   return nullptr;;
               }
               return gcnew VNSDK::GenericCommand(new VN::GenericCommand(*writeCmd));
           }
           else
           {
               return nullptr;
           }
       };
   };
   
    class MeasRegister
   {
       protected:
       VN::Register* _reg;
       
       public:
       MeasRegister(VN::Register* reg) : _reg(reg) {};
       ~MeasRegister() { delete _reg; };
       VN::Register* GetReference() { return _reg; };
       
       VNSDK::GenericCommand* ToReadCommand()
       {
           VN::GenericCommand* cmd_c = new VN::GenericCommand(_reg->toReadCommand());
           VNSDK::GenericCommand* cmd = gcnew VNSDK::GenericCommand(cmd_c);
           return cmd;
       };
   };
   
   
   namespace Attitude
   {
    class MagGravRefVec : public ConfigRegister
   {
       public:
       MagGravRefVec() : ConfigRegister(new VN::Registers::Attitude::MagGravRefVec())
       {
       };
       
        Nullable<float> magRefN
       ;;
       
        Nullable<float> magRefE
       ;;
       
        Nullable<float> magRefD
       ;;
       
        Nullable<float> gravRefN
       ;;
       
        Nullable<float> gravRefE
       ;;
       
        Nullable<float> gravRefD
       ;;
       
       
   };
   
    class VpeBasicControl : public ConfigRegister
   {
       public:
       VpeBasicControl() : ConfigRegister(new VN::Registers::Attitude::VpeBasicControl())
       {
       };
       
        Nullable<uint8_t> resv
       ;;
       
       enum class HeadingMode : uint8_t
       {
           Absolute = 0,
           Relative = 1,
           Indoor = 2,
       };
        HeadingMode headingMode
       ;;
       
       enum class FilteringMode : uint8_t
       {
           Unfiltered = 0,
           AdaptivelyFiltered = 1,
       };
        FilteringMode filteringMode
       ;;
       
       enum class TuningMode : uint8_t
       {
           Static = 0,
           Adaptive = 1,
       };
        TuningMode tuningMode
       ;;
       
       
   };
   
    class VpeMagBasicTuning : public ConfigRegister
   {
       public:
       VpeMagBasicTuning() : ConfigRegister(new VN::Registers::Attitude::VpeMagBasicTuning())
       {
       };
       
        Nullable<float> baseTuningX
       ;;
       
        Nullable<float> baseTuningY
       ;;
       
        Nullable<float> baseTuningZ
       ;;
       
        Nullable<float> adaptiveTuningX
       ;;
       
        Nullable<float> adaptiveTuningY
       ;;
       
        Nullable<float> adaptiveTuningZ
       ;;
       
        Nullable<float> adaptiveFilteringX
       ;;
       
        Nullable<float> adaptiveFilteringY
       ;;
       
        Nullable<float> adaptiveFilteringZ
       ;;
       
       
   };
   
    class VpeAccelBasicTuning : public ConfigRegister
   {
       public:
       VpeAccelBasicTuning() : ConfigRegister(new VN::Registers::Attitude::VpeAccelBasicTuning())
       {
       };
       
        Nullable<float> baseTuningX
       ;;
       
        Nullable<float> baseTuningY
       ;;
       
        Nullable<float> baseTuningZ
       ;;
       
        Nullable<float> adaptiveTuningX
       ;;
       
        Nullable<float> adaptiveTuningY
       ;;
       
        Nullable<float> adaptiveTuningZ
       ;;
       
        Nullable<float> adaptiveFilteringX
       ;;
       
        Nullable<float> adaptiveFilteringY
       ;;
       
        Nullable<float> adaptiveFilteringZ
       ;;
       
       
   };
   
   } // namespace Attitude
   
   namespace GNSS
   {
    class GnssBasicConfig : public ConfigRegister
   {
       public:
       GnssBasicConfig() : ConfigRegister(new VN::Registers::GNSS::GnssBasicConfig())
       {
       };
       
       enum class ReceiverEnable : uint8_t
       {
           Internal = 0,
           VnWrite = 1,
           VnAdor = 2,
           GnssA = 100,
           VnWriteAndGnssA = 101,
           VnAdorAndGnssA = 102,
           VnWriteAndGnssAB = 201,
           VnAdorAndGnssAB = 202,
       };
        ReceiverEnable receiverEnable
       ;;
       
       enum class PpsSource : uint8_t
       {
           PpsPinRising = 0,
           PpsPinFalling = 1,
           SyncInRising = 2,
           SyncInFalling = 3,
           None = 6,
       };
        PpsSource ppsSource
       ;;
       
       enum class Rate : uint8_t
       {
           Rate1Hz = 1,
           Rate5Hz = 5,
       };
        Rate rate
       ;;
       
        Nullable<uint8_t> resv4
       ;;
       
       enum class AntPower : uint8_t
       {
           Off = 0,
           Internal = 1,
           External = 2,
       };
        AntPower antPower
       ;;
       
       
   };
   
    class GnssAOffset : public ConfigRegister
   {
       public:
       GnssAOffset() : ConfigRegister(new VN::Registers::GNSS::GnssAOffset())
       {
       };
       
        Nullable<float> positionX
       ;;
       
        Nullable<float> positionY
       ;;
       
        Nullable<float> positionZ
       ;;
       
       
   };
   
    class GnssSystemConfig : public ConfigRegister
   {
       public:
       GnssSystemConfig() : ConfigRegister(new VN::Registers::GNSS::GnssSystemConfig())
       {
           systems = gcnew Systems(_reg);
           sbasMode = gcnew SbasMode(_reg);
           sbasSelect1 = gcnew SbasSelect1(_reg);
           sbasSelect2 = gcnew SbasSelect2(_reg);
           sbasSelect3 = gcnew SbasSelect3(_reg);
       };
       
      class Systems
       {
           VN::Register* _reg;
           
           public:
           Systems(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint16_t> _value      
           ;;
           
           // GPS
            Nullable<uint16_t> gps
           ;;
           
           // SBAS
            Nullable<uint16_t> sbas
           ;;
           
           // GLONASS
            Nullable<uint16_t> glonass
           ;;
           
           // Beidou
            Nullable<uint16_t> beidou
           ;;
           
           // Galileo
            Nullable<uint16_t> galileo
           ;;
           
           // IMES
            Nullable<uint16_t> imes
           ;;
           
           // QZSS_L1_CA
            Nullable<uint16_t> qzssL1Ca
           ;;
           
           // QZSS_L1_SAIF
            Nullable<uint16_t> qzssL1Saif
           ;;
           
       };
       
       Systems* systems;
       
        Nullable<uint8_t> minCno
       ;;
       
        Nullable<uint8_t> minElev
       ;;
       
        Nullable<uint8_t> maxSats
       ;;
       
      class SbasMode
       {
           VN::Register* _reg;
           
           public:
           SbasMode(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint8_t> _value       
           ;;
           
           // Ranging
            Nullable<uint8_t> ranging
           ;;
           
           // DiffCorr
            Nullable<uint8_t> diffCorr
           ;;
           
           // Integrity
            Nullable<uint8_t> integrity
           ;;
           
           // TestMode
            Nullable<uint8_t> testMode
           ;;
           
       };
       
       SbasMode* sbasMode;
       
      class SbasSelect1
       {
           VN::Register* _reg;
           
           public:
           SbasSelect1(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint16_t> _value      
           ;;
           
           // Sbas120
            Nullable<uint16_t> sbas120
           ;;
           
           // Sbas121
            Nullable<uint16_t> sbas121
           ;;
           
           // Sbas122
            Nullable<uint16_t> sbas122
           ;;
           
           // Sbas123
            Nullable<uint16_t> sbas123
           ;;
           
           // Sbas124
            Nullable<uint16_t> sbas124
           ;;
           
           // Sbas125
            Nullable<uint16_t> sbas125
           ;;
           
           // Sbas126
            Nullable<uint16_t> sbas126
           ;;
           
           // Sbas127
            Nullable<uint16_t> sbas127
           ;;
           
           // Sbas128
            Nullable<uint16_t> sbas128
           ;;
           
           // Sbas129
            Nullable<uint16_t> sbas129
           ;;
           
           // Sbas130
            Nullable<uint16_t> sbas130
           ;;
           
           // Sbas131
            Nullable<uint16_t> sbas131
           ;;
           
           // Sbas132
            Nullable<uint16_t> sbas132
           ;;
           
           // Sbas133
            Nullable<uint16_t> sbas133
           ;;
           
           // Sbas134
            Nullable<uint16_t> sbas134
           ;;
           
           // Sbas135
            Nullable<uint16_t> sbas135
           ;;
           
       };
       
       SbasSelect1* sbasSelect1;
       
      class SbasSelect2
       {
           VN::Register* _reg;
           
           public:
           SbasSelect2(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint16_t> _value      
           ;;
           
           // Sbas136
            Nullable<uint16_t> sbas136
           ;;
           
           // Sbas137
            Nullable<uint16_t> sbas137
           ;;
           
           // Sbas138
            Nullable<uint16_t> sbas138
           ;;
           
           // Sbas139
            Nullable<uint16_t> sbas139
           ;;
           
           // Sbas140
            Nullable<uint16_t> sbas140
           ;;
           
           // Sbas141
            Nullable<uint16_t> sbas141
           ;;
           
           // Sbas142
            Nullable<uint16_t> sbas142
           ;;
           
           // Sbas143
            Nullable<uint16_t> sbas143
           ;;
           
           // Sbas144
            Nullable<uint16_t> sbas144
           ;;
           
           // Sbas145
            Nullable<uint16_t> sbas145
           ;;
           
           // Sbas146
            Nullable<uint16_t> sbas146
           ;;
           
           // Sbas147
            Nullable<uint16_t> sbas147
           ;;
           
           // Sbas148
            Nullable<uint16_t> sbas148
           ;;
           
           // Sbas149
            Nullable<uint16_t> sbas149
           ;;
           
           // Sbas150
            Nullable<uint16_t> sbas150
           ;;
           
           // Sbas151
            Nullable<uint16_t> sbas151
           ;;
           
       };
       
       SbasSelect2* sbasSelect2;
       
      class SbasSelect3
       {
           VN::Register* _reg;
           
           public:
           SbasSelect3(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint16_t> _value      
           ;;
           
           // Sbas152
            Nullable<uint16_t> sbas152
           ;;
           
           // Sbas153
            Nullable<uint16_t> sbas153
           ;;
           
           // Sbas154
            Nullable<uint16_t> sbas154
           ;;
           
           // Sbas155
            Nullable<uint16_t> sbas155
           ;;
           
           // Sbas156
            Nullable<uint16_t> sbas156
           ;;
           
           // Sbas157
            Nullable<uint16_t> sbas157
           ;;
           
           // Sbas158
            Nullable<uint16_t> sbas158
           ;;
           
       };
       
       SbasSelect3* sbasSelect3;
       
       enum class ReceiverSelect : uint8_t
       {
           GnssAB = 0,
           GnssA = 1,
           GnssB = 2,
       };
        ReceiverSelect receiverSelect
       ;;
       
       
   };
   
    class GnssSyncConfig : public ConfigRegister
   {
       public:
       GnssSyncConfig() : ConfigRegister(new VN::Registers::GNSS::GnssSyncConfig())
       {
       };
       
       enum class GnssSyncEnable : uint8_t
       {
           Off = 0,
           AlwaysOn = 1,
           OnWhenLocked = 2,
       };
        GnssSyncEnable gnssSyncEnable
       ;;
       
       enum class Polarity : uint8_t
       {
           FallingEdge = 0,
           RisingEdge = 1,
       };
        Polarity polarity
       ;;
       
       enum class SpecType : uint8_t
       {
           PeriodPulseWidth = 0,
           FreqDutyCycle = 1,
       };
        SpecType specType
       ;;
       
        Nullable<uint8_t> resv
       ;;
       
        Nullable<uint32_t> period
       ;;
       
        Nullable<uint32_t> pulseWidth
       ;;
       
        Nullable<int32_t> offset
       ;;
       
       
   };
   
    class ExtGnssOffset : public ConfigRegister
   {
       public:
       ExtGnssOffset() : ConfigRegister(new VN::Registers::GNSS::ExtGnssOffset())
       {
       };
       
        Nullable<float> positionX
       ;;
       
        Nullable<float> positionY
       ;;
       
        Nullable<float> positionZ
       ;;
       
       
   };
   
   } // namespace GNSS
   
   namespace GNSSCompass
   {
    class GnssCompassBaseline : public ConfigRegister
   {
       public:
       GnssCompassBaseline() : ConfigRegister(new VN::Registers::GNSSCompass::GnssCompassBaseline())
       {
       };
       
        Nullable<float> positionX
       ;;
       
        Nullable<float> positionY
       ;;
       
        Nullable<float> positionZ
       ;;
       
        Nullable<float> uncertaintyX
       ;;
       
        Nullable<float> uncertaintyY
       ;;
       
        Nullable<float> uncertaintyZ
       ;;
       
       
   };
   
   } // namespace GNSSCompass
   
   namespace HardSoftIronEstimator
   {
    class RealTimeHsiControl : public ConfigRegister
   {
       public:
       RealTimeHsiControl() : ConfigRegister(new VN::Registers::HardSoftIronEstimator::RealTimeHsiControl())
       {
       };
       
       enum class Mode : uint8_t
       {
           Off = 0,
           Run = 1,
           Reset = 2,
       };
        Mode mode
       ;;
       
       enum class ApplyCompensation : uint8_t
       {
           Disable = 1,
           Enable = 3,
       };
        ApplyCompensation applyCompensation
       ;;
       
        Nullable<uint8_t> convergeRate
       ;;
       
       
   };
   
   } // namespace HardSoftIronEstimator
   
   namespace Heave
   {
    class HeaveBasicConfig : public ConfigRegister
   {
       public:
       HeaveBasicConfig() : ConfigRegister(new VN::Registers::Heave::HeaveBasicConfig())
       {
       };
       
        Nullable<float> initialWavePeriod
       ;;
       
        Nullable<float> initialWaveAmplitude
       ;;
       
        Nullable<float> maxWavePeriod
       ;;
       
        Nullable<float> minWaveAmplitude
       ;;
       
        Nullable<float> delayedHeaveCutoffFreq
       ;;
       
        Nullable<float> heaveCutoffFreq
       ;;
       
        Nullable<float> heaveRateCutoffFreq
       ;;
       
       
   };
   
   } // namespace Heave
   
   namespace IMU
   {
    class MagCal : public ConfigRegister
   {
       public:
       MagCal() : ConfigRegister(new VN::Registers::IMU::MagCal())
       {
       };
       
        Nullable<float> magGain00
       ;;
       
        Nullable<float> magGain01
       ;;
       
        Nullable<float> magGain02
       ;;
       
        Nullable<float> magGain10
       ;;
       
        Nullable<float> magGain11
       ;;
       
        Nullable<float> magGain12
       ;;
       
        Nullable<float> magGain20
       ;;
       
        Nullable<float> magGain21
       ;;
       
        Nullable<float> magGain22
       ;;
       
        Nullable<float> magBiasX
       ;;
       
        Nullable<float> magBiasY
       ;;
       
        Nullable<float> magBiasZ
       ;;
       
       
   };
   
    class AccelCal : public ConfigRegister
   {
       public:
       AccelCal() : ConfigRegister(new VN::Registers::IMU::AccelCal())
       {
       };
       
        Nullable<float> accelGain00
       ;;
       
        Nullable<float> accelGain01
       ;;
       
        Nullable<float> accelGain02
       ;;
       
        Nullable<float> accelGain10
       ;;
       
        Nullable<float> accelGain11
       ;;
       
        Nullable<float> accelGain12
       ;;
       
        Nullable<float> accelGain20
       ;;
       
        Nullable<float> accelGain21
       ;;
       
        Nullable<float> accelGain22
       ;;
       
        Nullable<float> accelBiasX
       ;;
       
        Nullable<float> accelBiasY
       ;;
       
        Nullable<float> accelBiasZ
       ;;
       
       
   };
   
    class RefFrameRot : public ConfigRegister
   {
       public:
       RefFrameRot() : ConfigRegister(new VN::Registers::IMU::RefFrameRot())
       {
       };
       
        Nullable<float> rfr00
       ;;
       
        Nullable<float> rfr01
       ;;
       
        Nullable<float> rfr02
       ;;
       
        Nullable<float> rfr10
       ;;
       
        Nullable<float> rfr11
       ;;
       
        Nullable<float> rfr12
       ;;
       
        Nullable<float> rfr20
       ;;
       
        Nullable<float> rfr21
       ;;
       
        Nullable<float> rfr22
       ;;
       
       
   };
   
    class DeltaThetaVelConfig : public ConfigRegister
   {
       public:
       DeltaThetaVelConfig() : ConfigRegister(new VN::Registers::IMU::DeltaThetaVelConfig())
       {
       };
       
       enum class IntegrationFrame : uint8_t
       {
           Body = 0,
           NED = 1,
       };
        IntegrationFrame integrationFrame
       ;;
       
       enum class GyroCompensation : uint8_t
       {
           None = 0,
           Bias = 1,
       };
        GyroCompensation gyroCompensation
       ;;
       
       enum class AccelCompensation : uint8_t
       {
           None = 0,
           Gravity = 1,
           Bias = 2,
           BiasAndGravity = 3,
       };
        AccelCompensation accelCompensation
       ;;
       
       enum class EarthRateCompensation : uint8_t
       {
           None = 0,
           GyroRate = 1,
           CoriolisAccel = 2,
           RateAndCoriolis = 3,
       };
        EarthRateCompensation earthRateCompensation
       ;;
       
        Nullable<uint16_t> resv
       ;;
       
       
   };
   
    class GyroCal : public ConfigRegister
   {
       public:
       GyroCal() : ConfigRegister(new VN::Registers::IMU::GyroCal())
       {
       };
       
        Nullable<float> gyroGain00
       ;;
       
        Nullable<float> gyroGain01
       ;;
       
        Nullable<float> gyroGain02
       ;;
       
        Nullable<float> gyroGain10
       ;;
       
        Nullable<float> gyroGain11
       ;;
       
        Nullable<float> gyroGain12
       ;;
       
        Nullable<float> gyroGain20
       ;;
       
        Nullable<float> gyroGain21
       ;;
       
        Nullable<float> gyroGain22
       ;;
       
        Nullable<float> gyroBiasX
       ;;
       
        Nullable<float> gyroBiasY
       ;;
       
        Nullable<float> gyroBiasZ
       ;;
       
       
   };
   
    class ImuFilterControl : public ConfigRegister
   {
       public:
       ImuFilterControl() : ConfigRegister(new VN::Registers::IMU::ImuFilterControl())
       {
           magFilterMode = gcnew MagFilterMode(_reg);
           accelFilterMode = gcnew AccelFilterMode(_reg);
           gyroFilterMode = gcnew GyroFilterMode(_reg);
           tempFilterMode = gcnew TempFilterMode(_reg);
           presFilterMode = gcnew PresFilterMode(_reg);
       };
       
        Nullable<uint16_t> magWindowSize
       ;;
       
        Nullable<uint16_t> accelWindowSize
       ;;
       
        Nullable<uint16_t> gyroWindowSize
       ;;
       
        Nullable<uint16_t> tempWindowSize
       ;;
       
        Nullable<uint16_t> presWindowSize
       ;;
       
      class MagFilterMode
       {
           VN::Register* _reg;
           
           public:
           MagFilterMode(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint8_t> _value       
           ;;
           
           // Uncomp
            Nullable<uint8_t> uncomp
           ;;
           
           // Comp
            Nullable<uint8_t> comp
           ;;
           
       };
       
       MagFilterMode* magFilterMode;
       
      class AccelFilterMode
       {
           VN::Register* _reg;
           
           public:
           AccelFilterMode(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint8_t> _value       
           ;;
           
           // Uncomp
            Nullable<uint8_t> uncomp
           ;;
           
           // Comp
            Nullable<uint8_t> comp
           ;;
           
       };
       
       AccelFilterMode* accelFilterMode;
       
      class GyroFilterMode
       {
           VN::Register* _reg;
           
           public:
           GyroFilterMode(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint8_t> _value       
           ;;
           
           // Uncomp
            Nullable<uint8_t> uncomp
           ;;
           
           // Comp
            Nullable<uint8_t> comp
           ;;
           
       };
       
       GyroFilterMode* gyroFilterMode;
       
      class TempFilterMode
       {
           VN::Register* _reg;
           
           public:
           TempFilterMode(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint8_t> _value       
           ;;
           
           // Uncomp
            Nullable<uint8_t> uncomp
           ;;
           
           // Comp
            Nullable<uint8_t> comp
           ;;
           
       };
       
       TempFilterMode* tempFilterMode;
       
      class PresFilterMode
       {
           VN::Register* _reg;
           
           public:
           PresFilterMode(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint8_t> _value       
           ;;
           
           // Uncomp
            Nullable<uint8_t> uncomp
           ;;
           
           // Comp
            Nullable<uint8_t> comp
           ;;
           
       };
       
       PresFilterMode* presFilterMode;
       
       
   };
   
   } // namespace IMU
   
   namespace INS
   {
    class InsBasicConfig : public ConfigRegister
   {
       public:
       InsBasicConfig() : ConfigRegister(new VN::Registers::INS::InsBasicConfig())
       {
       };
       
       enum class Scenario : uint8_t
       {
           Ahrs = 0,
           GnssInsWithPressure = 1,
           GnssInsNoPressure = 2,
           DualGnssNoPressure = 3,
           DualGnssWithPressure = 5,
       };
        Scenario scenario
       ;;
       
       enum class AhrsAiding : uint8_t
       {
           Disable = 0,
           Enable = 1,
       };
        AhrsAiding ahrsAiding
       ;;
       
       enum class EstBaseline : uint8_t
       {
           Disable = 0,
           Enable = 1,
       };
        EstBaseline estBaseline
       ;;
       
        Nullable<uint8_t> resv
       ;;
       
       
   };
   
    class FilterStartupBias : public ConfigRegister
   {
       public:
       FilterStartupBias() : ConfigRegister(new VN::Registers::INS::FilterStartupBias())
       {
       };
       
        Nullable<float> gyroBiasX
       ;;
       
        Nullable<float> gyroBiasY
       ;;
       
        Nullable<float> gyroBiasZ
       ;;
       
        Nullable<float> accelBiasX
       ;;
       
        Nullable<float> accelBiasY
       ;;
       
        Nullable<float> accelBiasZ
       ;;
       
        Nullable<float> presBias
       ;;
       
       
   };
   
    class InsRefOffset : public ConfigRegister
   {
       public:
       InsRefOffset() : ConfigRegister(new VN::Registers::INS::InsRefOffset())
       {
       };
       
        Nullable<float> refOffsetX
       ;;
       
        Nullable<float> refOffsetY
       ;;
       
        Nullable<float> refOffsetZ
       ;;
       
        Nullable<float> refUncertX
       ;;
       
        Nullable<float> refUncertY
       ;;
       
        Nullable<float> refUncertZ
       ;;
       
       
   };
   
    class InsGnssSelect : public ConfigRegister
   {
       public:
       InsGnssSelect() : ConfigRegister(new VN::Registers::INS::InsGnssSelect())
       {
       };
       
       enum class ActiveReceiverSelect : uint8_t
       {
           None = 0,
           PrimaryReceiver = 1,
           SecondaryReceiver = 2,
           TertiaryReceiver = 3,
           FallbackOnFailure = 5,
       };
        ActiveReceiverSelect activeReceiverSelect
       ;;
       
        Nullable<uint8_t> usedForNavTime
       ;;
       
        Nullable<uint8_t> hysteresisTime
       ;;
       
       enum class UseGnssCompass : uint8_t
       {
           Off = 0,
           On = 1,
       };
        UseGnssCompass useGnssCompass
       ;;
       
        Nullable<uint8_t> resv1
       ;;
       
        Nullable<uint8_t> resv2
       ;;
       
       
   };
   
   } // namespace INS
   
   namespace System
   {
    class UserTag : public ConfigRegister
   {
       public:
       UserTag() : ConfigRegister(new VN::Registers::System::UserTag())
       {
       };
       
        String* tag
       ;
       
       
   };
   
    class BaudRate : public ConfigRegister
   {
       public:
       BaudRate() : ConfigRegister(new VN::Registers::System::BaudRate())
       {
       };
       
       enum class BaudRates : uint32_t
       {
           Baud9600 = 9600,
           Baud19200 = 19200,
           Baud38400 = 38400,
           Baud57600 = 57600,
           Baud115200 = 115200,
           Baud128000 = 128000,
           Baud230400 = 230400,
           Baud460800 = 460800,
           Baud921600 = 921600,
       };
        BaudRates baudRate
       ;;
       
       enum class SerialPort : uint8_t
       {
           ActiveSerial = 0,                       
           Serial1 = 1,
           Serial2 = 2,
           Poll = static_cast<uint8_t>('?')
       };
        SerialPort serialPort
       ;;
       
       
   };
   
   inline VN::Registers::System::BaudRate::BaudRates ToNativeInstance(BaudRate::BaudRates baudrate) { return static_cast<VN::Registers::System::BaudRate::BaudRates>(static_cast<int>(baudrate)); }
   
    class AsyncOutputType : public ConfigRegister
   {
       public:
       AsyncOutputType() : ConfigRegister(new VN::Registers::System::AsyncOutputType())
       {
       };
       
       enum class Ador : uint32_t
       {
           OFF = 0,
           YPR = 1,
           QTN = 2,
           QMR = 8,
           MAG = 10,
           ACC = 11,
           GYR = 12,
           MAR = 13,
           YMR = 14,
           YBA = 16,
           YIA = 17,
           IMU = 19,
           GPS = 20,
           GPE = 21,
           INS = 22,
           INE = 23,
           ISL = 28,
           ISE = 29,
           DTV = 30,
           G2S = 32,
           G2E = 33,
           HVE = 34,
       };
        Ador ador
       ;;
       
       enum class SerialPort : uint8_t
       {
           ActiveSerial = 0,                       
           Serial1 = 1,
           Serial2 = 2,
           Poll = static_cast<uint8_t>('?')
       };
        SerialPort serialPort
       ;;
       
       
   };
   
    class AsyncOutputFreq : public ConfigRegister
   {
       public:
       AsyncOutputFreq() : ConfigRegister(new VN::Registers::System::AsyncOutputFreq())
       {
       };
       
       enum class Adof : uint32_t
       {
           Rate0Hz = 0,
           Rate1Hz = 1,
           Rate2Hz = 2,
           Rate4Hz = 4,
           Rate5Hz = 5,
           Rate10Hz = 10,
           Rate20Hz = 20,
           Rate25Hz = 25,
           Rate40Hz = 40,
           Rate50Hz = 50,
           Rate100Hz = 100,
           Rate200Hz = 200,
       };
        Adof adof
       ;;
       
       enum class SerialPort : uint8_t
       {
           ActiveSerial = 0,                       
           Serial1 = 1,
           Serial2 = 2,
           Poll = static_cast<uint8_t>('?')
       };
        SerialPort serialPort
       ;;
       
       
   };
   
    class ProtocolControl : public ConfigRegister
   {
       public:
       ProtocolControl() : ConfigRegister(new VN::Registers::System::ProtocolControl())
       {
       };
       
       enum class AsciiAppendCount : uint8_t
       {
           None = 0,
           SyncInCount = 1,
           SyncInTime = 2,
           SyncOutCount = 3,
           GpsPps = 4,
           GpsTow = 5,
       };
        AsciiAppendCount asciiAppendCount
       ;;
       
       enum class AsciiAppendStatus : uint8_t
       {
           None = 0,
           Ahrs = 1,
           Ins = 2,
           Imu = 3,
           Gnss1 = 4,
           Gnss2 = 5,
           Gnss3 = 6,
       };
        AsciiAppendStatus asciiAppendStatus
       ;;
       
       enum class SpiAppendCount : uint8_t
       {
           None = 0,
           SyncInCount = 1,
           SyncInTime = 2,
           SyncOutCount = 3,
           GpsPps = 4,
           GpsTow = 5,
       };
        SpiAppendCount spiAppendCount
       ;;
       
       enum class SpiAppendStatus : uint8_t
       {
           None = 0,
           Ahrs = 1,
           Ins = 2,
           Imu = 3,
           Gnss1 = 4,
           Gnss2 = 5,
           Gnss3 = 6,
       };
        SpiAppendStatus spiAppendStatus
       ;;
       
       enum class AsciiChecksum : uint8_t
       {
           Checksum8bit = 1,
           Crc16bit = 3,
       };
        AsciiChecksum asciiChecksum
       ;;
       
       enum class SpiChecksum : uint8_t
       {
           Off = 0,
           Checksum8bit = 1,
           Crc16bit = 3,
       };
        SpiChecksum spiChecksum
       ;;
       
       enum class ErrorMode : uint8_t
       {
           Ignore = 0,
           SendError = 1,
           AdorOff = 2,
       };
        ErrorMode errorMode
       ;;
       
       
   };
   
    class SyncControl : public ConfigRegister
   {
       public:
       SyncControl() : ConfigRegister(new VN::Registers::System::SyncControl())
       {
       };
       
       enum class SyncInMode : uint8_t
       {
           Disable = 0,
           Count = 3,
           ImuSample = 4,
           AsyncAll = 5,
           Async0 = 6,
       };
        SyncInMode syncInMode
       ;;
       
       enum class SyncInEdge : uint8_t
       {
           RisingEdge = 0,
           FallingEdge = 1,
       };
        SyncInEdge syncInEdge
       ;;
       
        Nullable<uint16_t> syncInSkipFactor
       ;;
       
        Nullable<uint32_t> resv1
       ;;
       
       enum class SyncOutMode : uint8_t
       {
           None = 0,
           ImuStart = 1,
           ImuReady = 2,
           NavReady = 3,
           GpsPps = 6,
       };
        SyncOutMode syncOutMode
       ;;
       
       enum class SyncOutPolarity : uint8_t
       {
           NegativePulse = 0,
           PositivePulse = 1,
       };
        SyncOutPolarity syncOutPolarity
       ;;
       
        Nullable<uint16_t> syncOutSkipFactor
       ;;
       
        Nullable<uint32_t> syncOutPulseWidth
       ;;
       
        Nullable<uint32_t> resv2
       ;;
       
       
   };
   
    class BinaryOutput : public ConfigRegister
   {
       
       public:
       BinaryOutput(VN::Register* reg) : ConfigRegister(reg)
       {
           asyncMode = gcnew AsyncMode(reg);
           common = gcnew CommonGroup(reg);
           time = gcnew TimeGroup(reg);
           imu = gcnew ImuGroup(reg);
           gnss = gcnew GnssGroup(reg);
           attitude = gcnew AttitudeGroup(reg);
           ins = gcnew InsGroup(reg);
           gnss2 = gcnew Gnss2Group(reg);
           gnss3 = gcnew Gnss3Group(reg);
           
       };
       
      class AsyncMode
       {
           VN::Register* _reg;
           
           public:
           AsyncMode(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint16_t> _value      
           ;;
           
           // Serial1
            Nullable<bool> serial1
           ;;
           
           // Serial2
            Nullable<bool> serial2
           ;;
           
       };
       
       AsyncMode* asyncMode;
       
        Nullable<uint16_t> rateDivisor
       ;;
       
       VN::BinaryHeader toBinaryHeader()
       {
           return ((VN::Registers::System::BinaryOutput *)_reg)->toBinaryHeader();
       }
       
      class CommonGroup
       {
           VN::Register* _reg;
           
           public:
           CommonGroup(VN::Register* reg)
           {
               _reg = reg;
           }
           
            uint32_t _value
           ;
           
           // TimeStartup
            bool timeStartup
           ;
           
           // TimeGps
            bool timeGps
           ;
           
           // TimeSyncIn
            bool timeSyncIn
           ;
           
           // Ypr
            bool ypr
           ;
           
           // Quaternion
            bool quaternion
           ;
           
           // AngularRate
            bool angularRate
           ;
           
           // PosLla
            bool posLla
           ;
           
           // VelNed
            bool velNed
           ;
           
           // Accel
            bool accel
           ;
           
           // Imu
            bool imu
           ;
           
           // MagPres
            bool magPres
           ;
           
           // Deltas
            bool deltas
           ;
           
           // InsStatus
            bool insStatus
           ;
           
           // SyncInCnt
            bool syncInCnt
           ;
           
           // TimeGpsPps
            bool timeGpsPps
           ;
           
       };
       
       CommonGroup* common;
       
      class TimeGroup
       {
           VN::Register* _reg;
           
           public:
           TimeGroup(VN::Register* reg)
           {
               _reg = reg;
           }
           
            uint32_t _value
           ;
           
           // TimeStartup
            bool timeStartup
           ;
           
           // TimeGps
            bool timeGps
           ;
           
           // TimeGpsTow
            bool timeGpsTow
           ;
           
           // TimeGpsWeek
            bool timeGpsWeek
           ;
           
           // TimeSyncIn
            bool timeSyncIn
           ;
           
           // TimeGpsPps
            bool timeGpsPps
           ;
           
           // TimeUtc
            bool timeUtc
           ;
           
           // SyncInCnt
            bool syncInCnt
           ;
           
           // SyncOutCnt
            bool syncOutCnt
           ;
           
           // TimeStatus
            bool timeStatus
           ;
           
       };
       
       TimeGroup* time;
       
      class ImuGroup
       {
           VN::Register* _reg;
           
           public:
           ImuGroup(VN::Register* reg)
           {
               _reg = reg;
           }
           
            uint32_t _value
           ;
           
           // ImuStatus
            bool imuStatus
           ;
           
           // UncompMag
            bool uncompMag
           ;
           
           // UncompAccel
            bool uncompAccel
           ;
           
           // UncompGyro
            bool uncompGyro
           ;
           
           // Temperature
            bool temperature
           ;
           
           // Pressure
            bool pressure
           ;
           
           // DeltaTheta
            bool deltaTheta
           ;
           
           // DeltaVel
            bool deltaVel
           ;
           
           // Mag
            bool mag
           ;
           
           // Accel
            bool accel
           ;
           
           // AngularRate
            bool angularRate
           ;
           
           // SensSat
            bool sensSat
           ;
           
       };
       
       ImuGroup* imu;
       
      class GnssGroup
       {
           VN::Register* _reg;
           
           public:
           GnssGroup(VN::Register* reg)
           {
               _reg = reg;
           }
           
            uint32_t _value
           ;
           
           // Gnss1TimeUtc
            bool gnss1TimeUtc
           ;
           
           // Gps1Tow
            bool gps1Tow
           ;
           
           // Gps1Week
            bool gps1Week
           ;
           
           // Gnss1NumSats
            bool gnss1NumSats
           ;
           
           // Gnss1Fix
            bool gnss1Fix
           ;
           
           // Gnss1PosLla
            bool gnss1PosLla
           ;
           
           // Gnss1PosEcef
            bool gnss1PosEcef
           ;
           
           // Gnss1VelNed
            bool gnss1VelNed
           ;
           
           // Gnss1VelEcef
            bool gnss1VelEcef
           ;
           
           // Gnss1PosUncertainty
            bool gnss1PosUncertainty
           ;
           
           // Gnss1VelUncertainty
            bool gnss1VelUncertainty
           ;
           
           // Gnss1TimeUncertainty
            bool gnss1TimeUncertainty
           ;
           
           // Gnss1TimeInfo
            bool gnss1TimeInfo
           ;
           
           // Gnss1Dop
            bool gnss1Dop
           ;
           
           // Gnss1SatInfo
            bool gnss1SatInfo
           ;
           
           // Gnss1RawMeas
            bool gnss1RawMeas
           ;
           
           // Gnss1Status
            bool gnss1Status
           ;
           
           // Gnss1AltMSL
            bool gnss1AltMsl
           ;
           
       };
       
       GnssGroup* gnss;
       
      class AttitudeGroup
       {
           VN::Register* _reg;
           
           public:
           AttitudeGroup(VN::Register* reg)
           {
               _reg = reg;
           }
           
            uint32_t _value
           ;
           
           // Ypr
            bool ypr
           ;
           
           // Quaternion
            bool quaternion
           ;
           
           // Dcm
            bool dcm
           ;
           
           // MagNed
            bool magNed
           ;
           
           // AccelNed
            bool accelNed
           ;
           
           // LinBodyAcc
            bool linBodyAcc
           ;
           
           // LinAccelNed
            bool linAccelNed
           ;
           
           // YprU
            bool yprU
           ;
           
           // Heave
            bool heave
           ;
           
           // AttU
            bool attU
           ;
           
       };
       
       AttitudeGroup* attitude;
       
      class InsGroup
       {
           VN::Register* _reg;
           
           public:
           InsGroup(VN::Register* reg)
           {
               _reg = reg;
           }
           
            uint32_t _value
           ;
           
           // InsStatus
            bool insStatus
           ;
           
           // PosLla
            bool posLla
           ;
           
           // PosEcef
            bool posEcef
           ;
           
           // VelBody
            bool velBody
           ;
           
           // VelNed
            bool velNed
           ;
           
           // VelEcef
            bool velEcef
           ;
           
           // MagEcef
            bool magEcef
           ;
           
           // AccelEcef
            bool accelEcef
           ;
           
           // LinAccelEcef
            bool linAccelEcef
           ;
           
           // PosU
            bool posU
           ;
           
           // VelU
            bool velU
           ;
           
       };
       
       InsGroup* ins;
       
      class Gnss2Group
       {
           VN::Register* _reg;
           
           public:
           Gnss2Group(VN::Register* reg)
           {
               _reg = reg;
           }
           
            uint32_t _value
           ;
           
           // Gnss2TimeUtc
            bool gnss2TimeUtc
           ;
           
           // Gps2Tow
            bool gps2Tow
           ;
           
           // Gps2Week
            bool gps2Week
           ;
           
           // Gnss2NumSats
            bool gnss2NumSats
           ;
           
           // Gnss2Fix
            bool gnss2Fix
           ;
           
           // Gnss2PosLla
            bool gnss2PosLla
           ;
           
           // Gnss2PosEcef
            bool gnss2PosEcef
           ;
           
           // Gnss2VelNed
            bool gnss2VelNed
           ;
           
           // Gnss2VelEcef
            bool gnss2VelEcef
           ;
           
           // Gnss2PosUncertainty
            bool gnss2PosUncertainty
           ;
           
           // Gnss2VelUncertainty
            bool gnss2VelUncertainty
           ;
           
           // Gnss2TimeUncertainty
            bool gnss2TimeUncertainty
           ;
           
           // Gnss2TimeInfo
            bool gnss2TimeInfo
           ;
           
           // Gnss2Dop
            bool gnss2Dop
           ;
           
           // Gnss2SatInfo
            bool gnss2SatInfo
           ;
           
           // Gnss2RawMeas
            bool gnss2RawMeas
           ;
           
           // Gnss2Status
            bool gnss2Status
           ;
           
           // Gnss2AltMSL
            bool gnss2AltMsl
           ;
           
       };
       
       Gnss2Group* gnss2;
       
      class Gnss3Group
       {
           VN::Register* _reg;
           
           public:
           Gnss3Group(VN::Register* reg)
           {
               _reg = reg;
           }
           
            uint32_t _value
           ;
           
           // Gnss3TimeUtc
            bool gnss3TimeUtc
           ;
           
           // Gps3Tow
            bool gps3Tow
           ;
           
           // Gps3Week
            bool gps3Week
           ;
           
           // Gnss3NumSats
            bool gnss3NumSats
           ;
           
           // Gnss3Fix
            bool gnss3Fix
           ;
           
           // Gnss3PosLla
            bool gnss3PosLla
           ;
           
           // Gnss3PosEcef
            bool gnss3PosEcef
           ;
           
           // Gnss3VelNed
            bool gnss3VelNed
           ;
           
           // Gnss3VelEcef
            bool gnss3VelEcef
           ;
           
           // Gnss3PosUncertainty
            bool gnss3PosUncertainty
           ;
           
           // Gnss3VelUncertainty
            bool gnss3VelUncertainty
           ;
           
           // Gnss3TimeUncertainty
            bool gnss3TimeUncertainty
           ;
           
           // Gnss3TimeInfo
            bool gnss3TimeInfo
           ;
           
           // Gnss3Dop
            bool gnss3Dop
           ;
           
           // Gnss3SatInfo
            bool gnss3SatInfo
           ;
           
           // Gnss3RawMeas
            bool gnss3RawMeas
           ;
           
           // Gnss3Status
            bool gnss3Status
           ;
           
           // Gnss3AltMSL
            bool gnss3AltMsl
           ;
           
       };
       
       Gnss3Group* gnss3;
       
       
   };
   
    class BinaryOutput1 : public BinaryOutput
   {
       public:
       BinaryOutput1() : BinaryOutput(new VN::Registers::System::BinaryOutput1()) {};
   };
   
    class BinaryOutput2 : public BinaryOutput
   {
       public:
       BinaryOutput2() : BinaryOutput(new VN::Registers::System::BinaryOutput2()) {};
   };
   
    class BinaryOutput3 : public BinaryOutput
   {
       public:
       BinaryOutput3() : BinaryOutput(new VN::Registers::System::BinaryOutput3()) {};
   };
   
    class NmeaOutput1 : public ConfigRegister
   {
       public:
       NmeaOutput1() : ConfigRegister(new VN::Registers::System::NmeaOutput1())
       {
           msgSelection = gcnew MsgSelection(_reg);
       };
       
       enum class Port : uint8_t
       {
           None = 0,
           Serial1 = 1,
           Serial2 = 2,
           Serial1And2 = 3,
       };
        Port port
       ;;
       
       enum class Rate : uint8_t
       {
           Rate0Hz = 0,
           Rate1Hz = 1,
           Rate5Hz = 5,
           Rate10Hz = 10,
           Rate20Hz = 20,
       };
        Rate rate
       ;;
       
       enum class Mode : uint8_t
       {
           V41GPID = 0,
           V23GPID = 1,
           V41SYSID = 2,
       };
        Mode mode
       ;;
       
       enum class GnssSelect : uint8_t
       {
           GnssA = 0,
           ActiveReceiver = 1,
       };
        GnssSelect gnssSelect
       ;;
       
      class MsgSelection
       {
           VN::Register* _reg;
           
           public:
           MsgSelection(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint32_t> _value      
           ;;
           
           // RMC_GNSS
            Nullable<uint32_t> rmcGnss
           ;;
           
           // RMC_INS
            Nullable<uint32_t> rmcIns
           ;;
           
           // GGA_GNSS
            Nullable<uint32_t> ggaGnss
           ;;
           
           // GGA_INS
            Nullable<uint32_t> ggaIns
           ;;
           
           // GLL_GNSS
            Nullable<uint32_t> gllGnss
           ;;
           
           // GLL_INS
            Nullable<uint32_t> gllIns
           ;;
           
           // GSA_GNSS
            Nullable<uint32_t> gsaGnss
           ;;
           
           // GSV_GNSS
            Nullable<uint32_t> gsvGnss
           ;;
           
           // HDG_INS
            Nullable<uint32_t> hdgIns
           ;;
           
           // HDT_INS
            Nullable<uint32_t> hdtIns
           ;;
           
           // THS_INS
            Nullable<uint32_t> thsIns
           ;;
           
           // VTG_GNSS
            Nullable<uint32_t> vtgGnss
           ;;
           
           // VTG_INS
            Nullable<uint32_t> vtgIns
           ;;
           
           // ZDA_GNSS
            Nullable<uint32_t> zdaGnss
           ;;
           
           // ZDA_INS
            Nullable<uint32_t> zdaIns
           ;;
           
           // PASHR_INS
            Nullable<uint32_t> pashrIns
           ;;
           
           // TSS1_INS
            Nullable<uint32_t> tss1Ins
           ;;
           
           // INDYN
            Nullable<uint32_t> indyn
           ;;
           
       };
       
       MsgSelection* msgSelection;
       
       
   };
   
    class NmeaOutput2 : public ConfigRegister
   {
       public:
       NmeaOutput2() : ConfigRegister(new VN::Registers::System::NmeaOutput2())
       {
           msgSelection = gcnew MsgSelection(_reg);
       };
       
       enum class Port : uint8_t
       {
           None = 0,
           Serial1 = 1,
           Serial2 = 2,
           Serial1And2 = 3,
       };
        Port port
       ;;
       
       enum class Rate : uint8_t
       {
           Rate0Hz = 0,
           Rate1Hz = 1,
           Rate5Hz = 5,
           Rate10Hz = 10,
           Rate20Hz = 20,
       };
        Rate rate
       ;;
       
       enum class Mode : uint8_t
       {
           V41GPID = 0,
           V23GPID = 1,
           V41SYSID = 2,
       };
        Mode mode
       ;;
       
       enum class GnssSelect : uint8_t
       {
           GnssA = 0,
           ActiveReceiver = 1,
       };
        GnssSelect gnssSelect
       ;;
       
      class MsgSelection
       {
           VN::Register* _reg;
           
           public:
           MsgSelection(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint32_t> _value      
           ;;
           
           // RMC_GNSS
            Nullable<uint32_t> rmcGnss
           ;;
           
           // RMC_INS
            Nullable<uint32_t> rmcIns
           ;;
           
           // GGA_GNSS
            Nullable<uint32_t> ggaGnss
           ;;
           
           // GGA_INS
            Nullable<uint32_t> ggaIns
           ;;
           
           // GLL_GNSS
            Nullable<uint32_t> gllGnss
           ;;
           
           // GLL_INS
            Nullable<uint32_t> gllIns
           ;;
           
           // GSA_GNSS
            Nullable<uint32_t> gsaGnss
           ;;
           
           // GSV_GNSS
            Nullable<uint32_t> gsvGnss
           ;;
           
           // HDG_INS
            Nullable<uint32_t> hdgIns
           ;;
           
           // HDT_INS
            Nullable<uint32_t> hdtIns
           ;;
           
           // THS_INS
            Nullable<uint32_t> thsIns
           ;;
           
           // VTG_GNSS
            Nullable<uint32_t> vtgGnss
           ;;
           
           // VTG_INS
            Nullable<uint32_t> vtgIns
           ;;
           
           // ZDA_GNSS
            Nullable<uint32_t> zdaGnss
           ;;
           
           // ZDA_INS
            Nullable<uint32_t> zdaIns
           ;;
           
           // PASHR_INS
            Nullable<uint32_t> pashrIns
           ;;
           
           // TSS1_INS
            Nullable<uint32_t> tss1Ins
           ;;
           
           // INDYN
            Nullable<uint32_t> indyn
           ;;
           
       };
       
       MsgSelection* msgSelection;
       
       
   };
   
    class LegacyCompatibilitySettings : public ConfigRegister
   {
       public:
       LegacyCompatibilitySettings() : ConfigRegister(new VN::Registers::System::LegacyCompatibilitySettings())
       {
           gnssLegacy = gcnew GnssLegacy(_reg);
       };
       
       enum class InsLegacy : uint8_t
       {
           Current = 0,
           Legacy = 1,
       };
        InsLegacy insLegacy
       ;;
       
      class GnssLegacy
       {
           VN::Register* _reg;
           
           public:
           GnssLegacy(VN::Register* reg)
           {
               _reg = reg;
           }
           
            Nullable<uint8_t> _value       
           ;;
           
           // LegacyGnssFix
            Nullable<uint8_t> legacyGnssFix
           ;;
           
           // RequireReg55Reset
            Nullable<uint8_t> requireReg55Reset
           ;;
           
           // alwaysPpsPulse
            Nullable<uint8_t> alwaysPpsPulse
           ;;
           
       };
       
       GnssLegacy* gnssLegacy;
       
       enum class ImuLegacy : uint8_t
       {
           Current = 0,
           Legacy = 1,
       };
        ImuLegacy imuLegacy
       ;;
       
       enum class HwLegacy : uint8_t
       {
           Current = 0,
           Legacy = 1,
       };
        HwLegacy hwLegacy
       ;;
       
       
   };
   
   } // namespace System
   
   namespace VelocityAiding
   {
    class VelAidingMeas : public ConfigRegister
   {
       public:
       VelAidingMeas() : ConfigRegister(new VN::Registers::VelocityAiding::VelAidingMeas())
       {
       };
       
        Nullable<float> velocityX
       ;;
       
        Nullable<float> velocityY
       ;;
       
        Nullable<float> velocityZ
       ;;
       
       
   };
   
    class VelAidingControl : public ConfigRegister
   {
       public:
       VelAidingControl() : ConfigRegister(new VN::Registers::VelocityAiding::VelAidingControl())
       {
       };
       
       enum class VelAidEnable : uint8_t
       {
           Disable = 0,
           Enable = 1,
       };
        VelAidEnable velAidEnable
       ;;
       
        Nullable<float> velUncertTuning
       ;;
       
        Nullable<float> resv
       ;;
       
       
   };
   
   } // namespace VelocityAiding
   
   namespace WorldMagGravityModel
   {
    class RefModelConfig : public ConfigRegister
   {
       public:
       RefModelConfig() : ConfigRegister(new VN::Registers::WorldMagGravityModel::RefModelConfig())
       {
       };
       
       enum class EnableMagModel : uint8_t
       {
           Disabled = 0,
           Enabled = 1,
       };
        EnableMagModel enableMagModel
       ;;
       
       enum class EnableGravityModel : uint8_t
       {
           Disabled = 0,
           Enabled = 1,
       };
        EnableGravityModel enableGravityModel
       ;;
       
        Nullable<uint8_t> resv1
       ;;
       
        Nullable<uint8_t> resv2
       ;;
       
        Nullable<uint32_t> recalcThreshold
       ;;
       
        Nullable<float> year
       ;;
       
        Nullable<double> latitude
       ;;
       
        Nullable<double> longitude
       ;;
       
        Nullable<double> altitude
       ;;
       
       
   };
   
   } // namespace WorldMagGravityModel
   
   namespace Attitude
   {
    class YawPitchRoll : public MeasRegister
   {
       public:
       YawPitchRoll() : MeasRegister(new VN::Registers::Attitude::YawPitchRoll())
       {
       };
       
        float yaw
       ;;
       
        float pitch
       ;;
       
        float roll
       ;;
       
       
   };
   
    class Quaternion : public MeasRegister
   {
       public:
       Quaternion() : MeasRegister(new VN::Registers::Attitude::Quaternion())
       {
       };
       
        float quatX
       ;;
       
        float quatY
       ;;
       
        float quatZ
       ;;
       
        float quatS
       ;;
       
       
   };
   
    class QuatMagAccelRate : public MeasRegister
   {
       public:
       QuatMagAccelRate() : MeasRegister(new VN::Registers::Attitude::QuatMagAccelRate())
       {
       };
       
        float quatX
       ;;
       
        float quatY
       ;;
       
        float quatZ
       ;;
       
        float quatS
       ;;
       
        float magX
       ;;
       
        float magY
       ;;
       
        float magZ
       ;;
       
        float accelX
       ;;
       
        float accelY
       ;;
       
        float accelZ
       ;;
       
        float gyroX
       ;;
       
        float gyroY
       ;;
       
        float gyroZ
       ;;
       
       
   };
   
    class YprMagAccelAngularRates : public MeasRegister
   {
       public:
       YprMagAccelAngularRates() : MeasRegister(new VN::Registers::Attitude::YprMagAccelAngularRates())
       {
       };
       
        float yaw
       ;;
       
        float pitch
       ;;
       
        float roll
       ;;
       
        float magX
       ;;
       
        float magY
       ;;
       
        float magZ
       ;;
       
        float accelX
       ;;
       
        float accelY
       ;;
       
        float accelZ
       ;;
       
        float gyroX
       ;;
       
        float gyroY
       ;;
       
        float gyroZ
       ;;
       
       
   };
   
    class YprLinearBodyAccelAngularRates : public MeasRegister
   {
       public:
       YprLinearBodyAccelAngularRates() : MeasRegister(new VN::Registers::Attitude::YprLinearBodyAccelAngularRates())
       {
       };
       
        float yaw
       ;;
       
        float pitch
       ;;
       
        float roll
       ;;
       
        float linAccelX
       ;;
       
        float linAccelY
       ;;
       
        float linAccelZ
       ;;
       
        float gyroX
       ;;
       
        float gyroY
       ;;
       
        float gyroZ
       ;;
       
       
   };
   
    class YprLinearInertialAccelAngularRates : public MeasRegister
   {
       public:
       YprLinearInertialAccelAngularRates() : MeasRegister(new VN::Registers::Attitude::YprLinearInertialAccelAngularRates())
       {
       };
       
        float yaw
       ;;
       
        float pitch
       ;;
       
        float roll
       ;;
       
        float linAccelN
       ;;
       
        float linAccelE
       ;;
       
        float linAccelD
       ;;
       
        float gyroX
       ;;
       
        float gyroY
       ;;
       
        float gyroZ
       ;;
       
       
   };
   
   } // namespace Attitude
   
   namespace GNSS
   {
    class GnssSolLla : public ConfigRegister
   {
       public:
       GnssSolLla() : ConfigRegister(new VN::Registers::GNSS::GnssSolLla())
       {
       };
       
        double gps1Tow
       ;;
       
        uint16_t gps1Week
       ;;
       
       enum class Gnss1Fix : uint8_t
       {
           NoFix = 0,
           TimeFix = 1,
           Fix2D = 2,
           Fix3D = 3,
           SBAS = 4,
           RtkFloat = 7,
           RtkFix = 8,
       };
        Gnss1Fix gnss1Fix
       ;;
       
        uint8_t gnss1NumSats
       ;;
       
        double gnss1Lat
       ;;
       
        double gnss1Lon
       ;;
       
        double gnss1Alt
       ;;
       
        float gnss1VelN
       ;;
       
        float gnss1VelE
       ;;
       
        float gnss1VelD
       ;;
       
        float gnss1PosUncertaintyN
       ;;
       
        float gnss1PosUncertaintyE
       ;;
       
        float gnss1PosUncertaintyD
       ;;
       
        float gnss1VelUncertainty
       ;;
       
        float gnss1TimeUncertainty
       ;;
       
       
   };
   
    class GnssSolEcef : public ConfigRegister
   {
       public:
       GnssSolEcef() : ConfigRegister(new VN::Registers::GNSS::GnssSolEcef())
       {
       };
       
        double gps1Tow
       ;;
       
        uint16_t gps1Week
       ;;
       
       enum class Gnss1Fix : uint8_t
       {
           NoFix = 0,
           TimeFix = 1,
           Fix2D = 2,
           Fix3D = 3,
           SBAS = 4,
           RtkFloat = 7,
           RtkFix = 8,
       };
        Gnss1Fix gnss1Fix
       ;;
       
        uint8_t gnss1NumSats
       ;;
       
        double gnss1PosX
       ;;
       
        double gnss1PosY
       ;;
       
        double gnss1PosZ
       ;;
       
        float gnss1VelX
       ;;
       
        float gnss1VelY
       ;;
       
        float gnss1VelZ
       ;;
       
        float gnss1PosUncertaintyX
       ;;
       
        float gnss1PosUncertaintyY
       ;;
       
        float gnss1PosUncertaintyZ
       ;;
       
        float gnss1VelUncertainty
       ;;
       
        float gnss1TimeUncertainty
       ;;
       
       
   };
   
    class Gnss2SolLla : public MeasRegister
   {
       public:
       Gnss2SolLla() : MeasRegister(new VN::Registers::GNSS::Gnss2SolLla())
       {
       };
       
        double gps2Tow
       ;;
       
        uint16_t gps2Week
       ;;
       
       enum class Gnss2Fix : uint8_t
       {
           NoFix = 0,
           TimeFix = 1,
           Fix2D = 2,
           Fix3D = 3,
           SBAS = 4,
           RtkFloat = 7,
           RtkFix = 8,
       };
        Gnss2Fix gnss2Fix
       ;;
       
        uint8_t gnss2NumSats
       ;;
       
        double gnss2Lat
       ;;
       
        double gnss2Lon
       ;;
       
        double gnss2Alt
       ;;
       
        float gnss2VelN
       ;;
       
        float gnss2VelE
       ;;
       
        float gnss2VelD
       ;;
       
        float gnss2PosUncertaintyN
       ;;
       
        float gnss2PosUncertaintyE
       ;;
       
        float gnss2PosUncertaintyD
       ;;
       
        float gnss2VelUncertainty
       ;;
       
        float gnss2TimeUncertainty
       ;;
       
       
   };
   
    class Gnss2SolEcef : public MeasRegister
   {
       public:
       Gnss2SolEcef() : MeasRegister(new VN::Registers::GNSS::Gnss2SolEcef())
       {
       };
       
        double gps2Tow
       ;;
       
        uint16_t gps2Week
       ;;
       
       enum class Gnss2Fix : uint8_t
       {
           NoFix = 0,
           TimeFix = 1,
           Fix2D = 2,
           Fix3D = 3,
           SBAS = 4,
           RtkFloat = 7,
           RtkFix = 8,
       };
        Gnss2Fix gnss2Fix
       ;;
       
        uint8_t gnss2NumSats
       ;;
       
        double gnss2PosX
       ;;
       
        double gnss2PosY
       ;;
       
        double gnss2PosZ
       ;;
       
        float gnss2VelX
       ;;
       
        float gnss2VelY
       ;;
       
        float gnss2VelZ
       ;;
       
        float gnss2PosUncertaintyX
       ;;
       
        float gnss2PosUncertaintyY
       ;;
       
        float gnss2PosUncertaintyZ
       ;;
       
        float gnss2VelUncertainty
       ;;
       
        float gnss2TimeUncertainty
       ;;
       
       
   };
   
   } // namespace GNSS
   
   namespace GNSSCompass
   {
    class GnssCompassSignalHealthStatus : public MeasRegister
   {
       public:
       GnssCompassSignalHealthStatus() : MeasRegister(new VN::Registers::GNSSCompass::GnssCompassSignalHealthStatus())
       {
       };
       
        float numSatsPvtA
       ;;
       
        float numSatsRtkA
       ;;
       
        float highestCn0A
       ;;
       
        float numSatsPvtB
       ;;
       
        float numSatsRtkB
       ;;
       
        float highestCn0B
       ;;
       
        float numComSatsPvt
       ;;
       
        float numComSatsRtk
       ;;
       
       
   };
   
    class GnssCompassEstBaseline : public MeasRegister
   {
       public:
       GnssCompassEstBaseline() : MeasRegister(new VN::Registers::GNSSCompass::GnssCompassEstBaseline())
       {
       };
       
        uint8_t estBaselineComplete
       ;;
       
        uint8_t resv
       ;;
       
        uint16_t numMeas
       ;;
       
        float positionX
       ;;
       
        float positionY
       ;;
       
        float positionZ
       ;;
       
        float uncertaintyX
       ;;
       
        float uncertaintyY
       ;;
       
        float uncertaintyZ
       ;;
       
       
   };
   
    class GnssCompassStartupStatus : public MeasRegister
   {
       public:
       GnssCompassStartupStatus() : MeasRegister(new VN::Registers::GNSSCompass::GnssCompassStartupStatus())
       {
       };
       
        uint8_t percentComplete
       ;;
       
        float currentHeading
       ;;
       
       
   };
   
   } // namespace GNSSCompass
   
   namespace HardSoftIronEstimator
   {
    class EstMagCal : public MeasRegister
   {
       public:
       EstMagCal() : MeasRegister(new VN::Registers::HardSoftIronEstimator::EstMagCal())
       {
       };
       
        float magGain00
       ;;
       
        float magGain01
       ;;
       
        float magGain02
       ;;
       
        float magGain10
       ;;
       
        float magGain11
       ;;
       
        float magGain12
       ;;
       
        float magGain20
       ;;
       
        float magGain21
       ;;
       
        float magGain22
       ;;
       
        float magBiasX
       ;;
       
        float magBiasY
       ;;
       
        float magBiasZ
       ;;
       
       
   };
   
   } // namespace HardSoftIronEstimator
   
   namespace Heave
   {
    class HeaveOutputs : public MeasRegister
   {
       public:
       HeaveOutputs() : MeasRegister(new VN::Registers::Heave::HeaveOutputs())
       {
       };
       
        float heave
       ;;
       
        float heaveRate
       ;;
       
        float delayedHeave
       ;;
       
       
   };
   
   } // namespace Heave
   
   namespace IMU
   {
    class Mag : public MeasRegister
   {
       public:
       Mag() : MeasRegister(new VN::Registers::IMU::Mag())
       {
       };
       
        float magX
       ;;
       
        float magY
       ;;
       
        float magZ
       ;;
       
       
   };
   
    class Accel : public MeasRegister
   {
       public:
       Accel() : MeasRegister(new VN::Registers::IMU::Accel())
       {
       };
       
        float accelX
       ;;
       
        float accelY
       ;;
       
        float accelZ
       ;;
       
       
   };
   
    class Gyro : public MeasRegister
   {
       public:
       Gyro() : MeasRegister(new VN::Registers::IMU::Gyro())
       {
       };
       
        float gyroX
       ;;
       
        float gyroY
       ;;
       
        float gyroZ
       ;;
       
       
   };
   
    class MagAccelGyro : public MeasRegister
   {
       public:
       MagAccelGyro() : MeasRegister(new VN::Registers::IMU::MagAccelGyro())
       {
       };
       
        float magX
       ;;
       
        float magY
       ;;
       
        float magZ
       ;;
       
        float accelX
       ;;
       
        float accelY
       ;;
       
        float accelZ
       ;;
       
        float gyroX
       ;;
       
        float gyroY
       ;;
       
        float gyroZ
       ;;
       
       
   };
   
    class ImuMeas : public MeasRegister
   {
       public:
       ImuMeas() : MeasRegister(new VN::Registers::IMU::ImuMeas())
       {
       };
       
        float uncompMagX
       ;;
       
        float uncompMagY
       ;;
       
        float uncompMagZ
       ;;
       
        float uncompAccX
       ;;
       
        float uncompAccY
       ;;
       
        float uncompAccZ
       ;;
       
        float uncompGyroX
       ;;
       
        float uncompGyroY
       ;;
       
        float uncompGyroZ
       ;;
       
        float temperature
       ;;
       
        float pressure
       ;;
       
       
   };
   
    class DeltaThetaVelocity : public MeasRegister
   {
       public:
       DeltaThetaVelocity() : MeasRegister(new VN::Registers::IMU::DeltaThetaVelocity())
       {
       };
       
        float deltaTime
       ;;
       
        float deltaThetaX
       ;;
       
        float deltaThetaY
       ;;
       
        float deltaThetaZ
       ;;
       
        float deltaVelX
       ;;
       
        float deltaVelY
       ;;
       
        float deltaVelZ
       ;;
       
       
   };
   
   } // namespace IMU
   
   namespace INS
   {
    class InsSolLla : public MeasRegister
   {
       public:
       InsSolLla() : MeasRegister(new VN::Registers::INS::InsSolLla())
       {
       };
       
        double timeGpsTow
       ;;
       
        uint16_t timeGpsWeek
       ;;
       
        VN::InsStatus insStatus
       ;;
       
        float yaw
       ;;
       
        float pitch
       ;;
       
        float roll
       ;;
       
        double posLat
       ;;
       
        double posLon
       ;;
       
        double posAlt
       ;;
       
        float velN
       ;;
       
        float velE
       ;;
       
        float velD
       ;;
       
        float attUncertainty
       ;;
       
        float posUncertainty
       ;;
       
        float velUncertainty
       ;;
       
       
   };
   
    class InsSolEcef : public MeasRegister
   {
       public:
       InsSolEcef() : MeasRegister(new VN::Registers::INS::InsSolEcef())
       {
       };
       
        double timeGpsTow
       ;;
       
        uint16_t timeGpsWeek
       ;;
       
        VN::InsStatus insStatus
       ;;
       
        float yaw
       ;;
       
        float pitch
       ;;
       
        float roll
       ;;
       
        double posEx
       ;;
       
        double posEy
       ;;
       
        double posEz
       ;;
       
        float velEx
       ;;
       
        float velEy
       ;;
       
        float velEz
       ;;
       
        float attUncertainty
       ;;
       
        float posUncertainty
       ;;
       
        float velUncertainty
       ;;
       
       
   };
   
    class InsStateLla : public MeasRegister
   {
       public:
       InsStateLla() : MeasRegister(new VN::Registers::INS::InsStateLla())
       {
       };
       
        float yaw
       ;;
       
        float pitch
       ;;
       
        float roll
       ;;
       
        double posLat
       ;;
       
        double posLon
       ;;
       
        double posAlt
       ;;
       
        float velN
       ;;
       
        float velE
       ;;
       
        float velD
       ;;
       
        float accelX
       ;;
       
        float accelY
       ;;
       
        float accelZ
       ;;
       
        float gyroX
       ;;
       
        float gyroY
       ;;
       
        float gyroZ
       ;;
       
       
   };
   
    class InsStateEcef : public MeasRegister
   {
       public:
       InsStateEcef() : MeasRegister(new VN::Registers::INS::InsStateEcef())
       {
       };
       
        float yaw
       ;;
       
        float pitch
       ;;
       
        float roll
       ;;
       
        double posEx
       ;;
       
        double posEy
       ;;
       
        double posEz
       ;;
       
        float velEx
       ;;
       
        float velEy
       ;;
       
        float velEz
       ;;
       
        float accelX
       ;;
       
        float accelY
       ;;
       
        float accelZ
       ;;
       
        float gyroX
       ;;
       
        float gyroY
       ;;
       
        float gyroZ
       ;;
       
       
   };
   
   } // namespace INS
   
   namespace System
   {
    class Model : public MeasRegister
   {
       public:
       Model() : MeasRegister(new VN::Registers::System::Model())
       {
       };
       
        String* model
       ;
       
       
   };
   
    class HwVer : public MeasRegister
   {
       public:
       HwVer() : MeasRegister(new VN::Registers::System::HwVer())
       {
       };
       
        uint32_t hwVer
       ;;
       
        uint32_t hwMinVer
       ;;
       
       
   };
   
    class Serial : public MeasRegister
   {
       public:
       Serial() : MeasRegister(new VN::Registers::System::Serial())
       {
       };
       
        uint32_t serialNum
       ;;
       
       
   };
   
    class FwVer : public MeasRegister
   {
       public:
       FwVer() : MeasRegister(new VN::Registers::System::FwVer())
       {
       };
       
        String* fwVer
       ;
       
       
   };
   
    class SyncStatus : public MeasRegister
   {
       public:
       SyncStatus() : MeasRegister(new VN::Registers::System::SyncStatus())
       {
       };
       
        uint32_t syncInCount
       ;;
       
        uint32_t syncInTime
       ;;
       
        uint32_t syncOutCount
       ;;
       
       
   };
   
   } // namespace System
   
   namespace ById {
   using reg0 = VNSDK::Registers::System::UserTag;
   using reg5 = VNSDK::Registers::System::BaudRate;
   using reg6 = VNSDK::Registers::System::AsyncOutputType;
   using reg7 = VNSDK::Registers::System::AsyncOutputFreq;
   using reg21 = VNSDK::Registers::Attitude::MagGravRefVec;
   using reg23 = VNSDK::Registers::IMU::MagCal;
   using reg25 = VNSDK::Registers::IMU::AccelCal;
   using reg26 = VNSDK::Registers::IMU::RefFrameRot;
   using reg30 = VNSDK::Registers::System::ProtocolControl;
   using reg32 = VNSDK::Registers::System::SyncControl;
   using reg35 = VNSDK::Registers::Attitude::VpeBasicControl;
   using reg36 = VNSDK::Registers::Attitude::VpeMagBasicTuning;
   using reg38 = VNSDK::Registers::Attitude::VpeAccelBasicTuning;
   using reg44 = VNSDK::Registers::HardSoftIronEstimator::RealTimeHsiControl;
   using reg50 = VNSDK::Registers::VelocityAiding::VelAidingMeas;
   using reg51 = VNSDK::Registers::VelocityAiding::VelAidingControl;
   using reg55 = VNSDK::Registers::GNSS::GnssBasicConfig;
   using reg57 = VNSDK::Registers::GNSS::GnssAOffset;
   using reg67 = VNSDK::Registers::INS::InsBasicConfig;
   using reg74 = VNSDK::Registers::INS::FilterStartupBias;
   using reg75 = VNSDK::Registers::System::BinaryOutput1;
   using reg76 = VNSDK::Registers::System::BinaryOutput2;
   using reg77 = VNSDK::Registers::System::BinaryOutput3;
   using reg82 = VNSDK::Registers::IMU::DeltaThetaVelConfig;
   using reg83 = VNSDK::Registers::WorldMagGravityModel::RefModelConfig;
   using reg84 = VNSDK::Registers::IMU::GyroCal;
   using reg85 = VNSDK::Registers::IMU::ImuFilterControl;
   using reg93 = VNSDK::Registers::GNSSCompass::GnssCompassBaseline;
   using reg99 = VNSDK::Registers::GNSS::GnssSystemConfig;
   using reg100 = VNSDK::Registers::GNSS::GnssSyncConfig;
   using reg101 = VNSDK::Registers::System::NmeaOutput1;
   using reg102 = VNSDK::Registers::System::NmeaOutput2;
   using reg105 = VNSDK::Registers::INS::InsRefOffset;
   using reg116 = VNSDK::Registers::Heave::HeaveBasicConfig;
   using reg144 = VNSDK::Registers::INS::InsGnssSelect;
   using reg157 = VNSDK::Registers::GNSS::ExtGnssOffset;
   using reg206 = VNSDK::Registers::System::LegacyCompatibilitySettings;
   using reg1 = VNSDK::Registers::System::Model;
   using reg2 = VNSDK::Registers::System::HwVer;
   using reg3 = VNSDK::Registers::System::Serial;
   using reg4 = VNSDK::Registers::System::FwVer;
   using reg8 = VNSDK::Registers::Attitude::YawPitchRoll;
   using reg9 = VNSDK::Registers::Attitude::Quaternion;
   using reg15 = VNSDK::Registers::Attitude::QuatMagAccelRate;
   using reg17 = VNSDK::Registers::IMU::Mag;
   using reg18 = VNSDK::Registers::IMU::Accel;
   using reg19 = VNSDK::Registers::IMU::Gyro;
   using reg20 = VNSDK::Registers::IMU::MagAccelGyro;
   using reg27 = VNSDK::Registers::Attitude::YprMagAccelAngularRates;
   using reg33 = VNSDK::Registers::System::SyncStatus;
   using reg47 = VNSDK::Registers::HardSoftIronEstimator::EstMagCal;
   using reg54 = VNSDK::Registers::IMU::ImuMeas;
   using reg58 = VNSDK::Registers::GNSS::GnssSolLla;
   using reg59 = VNSDK::Registers::GNSS::GnssSolEcef;
   using reg63 = VNSDK::Registers::INS::InsSolLla;
   using reg64 = VNSDK::Registers::INS::InsSolEcef;
   using reg72 = VNSDK::Registers::INS::InsStateLla;
   using reg73 = VNSDK::Registers::INS::InsStateEcef;
   using reg80 = VNSDK::Registers::IMU::DeltaThetaVelocity;
   using reg86 = VNSDK::Registers::GNSSCompass::GnssCompassSignalHealthStatus;
   using reg97 = VNSDK::Registers::GNSSCompass::GnssCompassEstBaseline;
   using reg98 = VNSDK::Registers::GNSSCompass::GnssCompassStartupStatus;
   using reg103 = VNSDK::Registers::GNSS::Gnss2SolLla;
   using reg104 = VNSDK::Registers::GNSS::Gnss2SolEcef;
   using reg115 = VNSDK::Registers::Heave::HeaveOutputs;
   using reg239 = VNSDK::Registers::Attitude::YprLinearBodyAccelAngularRates;
   using reg240 = VNSDK::Registers::Attitude::YprLinearInertialAccelAngularRates;
   } // namespace ById
   } // namespace Registers
   } // namespace VNSDK
   
   
   #endif //VN_CLI_REGISTERS_HPP_
   
   
