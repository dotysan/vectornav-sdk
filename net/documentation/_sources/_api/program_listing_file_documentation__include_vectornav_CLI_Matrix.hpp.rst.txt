
.. _program_listing_file_documentation__include_vectornav_CLI_Matrix.hpp:

Program Listing for File CLI_Matrix.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_documentation__include_vectornav_CLI_Matrix.hpp>` (``documentation\_include\vectornav\CLI_Matrix.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_CLI_MATRIX_HPP_
   #define VN_CLI_MATRIX_HPP_
   
   #include "vectornav/TemplateLibrary/Matrix.hpp"
   
   namespace VNSDK
   {
    class Mat3f
   {
   private:
       array<float>* matrix;
       size_t length;
   
   public:
   
       // Constructors
       Mat3f(float value)
       {
           length = 9;
           matrix = gcnew array<float>(length);
           for (int i = 0; i < length; i++) { matrix[i] = value; }
       }
       Mat3f(array<float>* values)
       {
           length = 9;
           matrix = gcnew array<float>(length);
           if (values->Length != length) { throw gcnew System::ArgumentException("array must contain exactly 9 elements for a 3x3 matrix."); }
           for (int i = 0; i < length; i++) { matrix[i] = values[i]; }
       }
       Mat3f(const VN::Mat3f& other)
       {
           length = 9;
           matrix = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { matrix[i] = other[i]; }
       }
       Mat3f(Mat3f* other)
       {
           length = 9;
           matrix = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { matrix[i] = other->matrix[i]; }
       }
   
       static Mat3f* Identity() {
           VN::Mat3f mat = VN::Mat3f::identity();
           return gcnew Mat3f(mat);
       }
   
       // Accessors
        float default[ int ]
       ;
        float default[ int, int ]
       ;
   
       float get(int index) { return matrix[index]; }
       void set(int index, float value) { matrix[index] = value; }
       float get(int row, int col) { return matrix[col + row * 3]; }
       void set(int row, int col, float value) { matrix[col + row * 3] = value; }
   
       // Conversions
       static std::array<float, 9> ToStdArray(Mat3f* other)
       {
           std::array<float, 9> stdArray;
           for (uint8_t i = 0; i < 9; i++) { stdArray[i] = other[i]; }
           return stdArray;
       }
       array<float>* ToArray()
       {
           array<float>* arr = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { arr[i] = matrix[i]; }
           return arr;
       }
       
       array<float>* ToColMajorArray()
       {
           uint8_t num_rows = 3;
           uint8_t num_cols = 3;
           array<float>* arr = gcnew array<float>(length);
           for (uint8_t i = 0; i < num_rows; i++)
           {
               for (uint8_t j = 0; j < num_cols; i++) { arr[i + (j * 3)] = matrix[j + (i * 3)]; }
           }
           return arr;
       }
   };
   
    class Vec3f
   {
   private:
       array<float>* vector;
       size_t length;
   
   public:
   
       // Constructors
       Vec3f(float value)
       {
           length = 3;
           vector = gcnew array<float>(length);
           for (int i = 0; i < length; i++) { vector[i] = value; }
       }
       Vec3f(array<float>* values)
       {
           length = 3;
           vector = gcnew array<float>(length);
           if (values->Length != length) { throw gcnew System::ArgumentException("array must contain exactly 3 elements for a 3x1 matrix."); }
           for (int i = 0; i < length; i++) { vector[i] = values[i]; }
       }
       Vec3f(const VN::Vec3f& other)
       {
           length = 3;
           vector = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { vector[i] = other[i]; }
       }
       Vec3f(Vec3f* other)
       {
           length = 3;
           vector = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { vector[i] = other->vector[i]; }
       }
   
       // Accessors
        float default[ int ]
       ;
   
       float get(int index) { return vector[index]; }
       void set(int index, float value) { vector[index] = value; }
   
        float x
       ;
        float y
       ;
        float z
       ;
   
       // Conversions
       static std::array<float, 3> ToStdArray(Vec3f* other)
       {
           std::array<float, 3> stdArray;
           for (uint8_t i = 0; i < 3; i++) { stdArray[i] = other[i]; }
           return stdArray;
       }
       array<float>* ToArray()
       {
           array<float>* arr = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { arr[i] = vector[i]; }
           return arr;
       }
   };
   
    class Vec4f
   {
   private:
       array<float>* vector;
       size_t length;
   
   public:
       // Constructors
       Vec4f(float value)
       {
           length = 4;
           vector = gcnew array<float>(length);
           for (int i = 0; i < length; i++) { vector[i] = value; }
       }
       Vec4f(array<float>* values)
       {
           length = 4;
           vector = gcnew array<float>(length);
           if (values->Length != length) { throw gcnew System::ArgumentException("array must contain exactly 3 elements for a 4x1 matrix."); }
           for (int i = 0; i < length; i++) { vector[i] = values[i]; }
       }
       Vec4f(const VN::Vec4f& other)
       {
           length = 4;
           vector = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { vector[i] = other[i]; }
       }
       Vec4f(Vec4f* other)
       {
           length = 4;
           vector = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { vector[i] = other->vector[i]; }
       }
   
       // Accessors
        float default[ int ]
       ;
   
       float get(int index) { return vector[index]; }
       void set(int index, float value) { vector[index] = value; }
   
       // Conversions
       static std::array<float, 4> ToStdArray(Vec4f* other)
       {
           std::array<float, 4> stdArray;
           for (uint8_t i = 0; i < 4; i++) { stdArray[i] = other[i]; }
           return stdArray;
       }
   
       array<float>* ToArray() {
           array<float>* arr = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { arr[i] = vector[i]; }
           return arr;
       }
   };
   
    class Vec8f
   {
   private:
       array<float>* vector;
       size_t length;
   
   public:
       // Constructors
       Vec8f(float value)
       {
           length = 8;
           vector = gcnew array<float>(length);
           for (int i = 0; i < length; i++) { vector[i] = value; }
       }
       Vec8f(array<float>* values)
       {
           length = 8;
           vector = gcnew array<float>(length);
           if (values->Length != length) { throw gcnew System::ArgumentException("array must contain exactly 3 elements for a 8x1 matrix."); }
           for (int i = 0; i < length; i++) { vector[i] = values[i]; }
       }
       Vec8f(const VN::Matrix<8, 1, float>& other)
       {
           length = 8;
           vector = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { vector[i] = other[i]; }
       }
       Vec8f(Vec8f* other)
       {
           length = 8;
           vector = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { vector[i] = other->vector[i]; }
       }
   
       // Accessors
        float default[ int ]
       ;
   
       float get(int index) { return vector[index]; }
       void set(int index, float value) { vector[index] = value; }
   
       // Conversions
       static std::array<float, 8> ToStdArray(Vec8f* other)
       {
           std::array<float, 8> stdArray;
           for (uint8_t i = 0; i < 8; i++) { stdArray[i] = other[i]; }
           return stdArray;
       }
       array<float>* ToArray()
       {
           array<float>* arr = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { arr[i] = vector[i]; }
           return arr;
       }
   };
   
    class Vec3d
   {
   private:
       array<double>* vector;
       size_t length;
   
   public:
   
       // Constructors
       Vec3d(double value)
       {
           length = 3;
           vector = gcnew array<double>(length);
           for (int i = 0; i < length; i++) { vector[i] = value; }
       }
       Vec3d(array<double>* values)
       {
           length = 3;
           vector = gcnew array<double>(length);
           if (values->Length != length) { throw gcnew System::ArgumentException("array must contain exactly 3 elements for a 3x1 matrix."); }
           for (int i = 0; i < length; i++) { vector[i] = values[i]; }
       }
       Vec3d(const VN::Vec3d& other)
       {
           length = 3;
           vector = gcnew array<double>(length);
           for (uint8_t i = 0; i < length; i++) { vector[i] = other[i]; }
       }
       Vec3d(Vec3d* other)
       {
           length = 3;
           vector = gcnew array<double>(length);
           for (uint8_t i = 0; i < length; i++) { vector[i] = other->vector[i]; }
       }
   
       // Accessors
        double default[ int ]
       ;
       double get(int index) { return vector[index]; }
       void set(int index, double value) { vector[index] = value; }
   
        double x
       ;
        double y
       ;
        double z
       ;
   
       // Conversions
       static std::array<double, 3> ToStdArray(Vec3d* other)
       {
           std::array<double, 3> stdArray;
           for (uint8_t i = 0; i < 3; i++) { stdArray[i] = other[i]; }
           return stdArray;
       }
       array<float>* ToArray()
       {
           array<float>* arr = gcnew array<float>(length);
           for (uint8_t i = 0; i < length; i++) { arr[i] = vector[i]; }
           return arr;
       }
   };
   
   }  // namespace VNSDK
   
   #endif  // VN_CLI_MATRIX_HPP_
