
.. _program_listing_file_documentation__include_vectornav_CLI_Commands.hpp:

Program Listing for File CLI_Commands.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_documentation__include_vectornav_CLI_Commands.hpp>` (``documentation\_include\vectornav\CLI_Commands.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef VN_CLI_COMMANDS_HPP_
   #define VN_CLI_COMMANDS_HPP_
   
   #include "Windows.h"
   #include <conio.h>
   #include <msclr/marshal.h>
   #include "CLI_GenericCommand.hpp"
   
   #pragma managed(push, off)
   #include "vectornav/Interface/Commands.hpp"
   #pragma managed(pop)
   
   #include <string>
   
   using namespace System;
   using namespace msclr::interop;
   
   namespace VNSDK
   {
   
        class WriteSettings : public GenericCommand
       {
       public:
           WriteSettings() : GenericCommand(new VN::WriteSettings()) {};
       };
   
        class RestoreFactorySettings : public GenericCommand
       {
       public:
           RestoreFactorySettings() : GenericCommand(new VN::RestoreFactorySettings()) {};
       };
   
        class Reset : public GenericCommand
       {
       public:
           Reset() : GenericCommand(new VN::Reset()) {};
       };
   
        class FirmwareUpdate : public GenericCommand
       {
       public:
           FirmwareUpdate() : GenericCommand(new VN::FirmwareUpdate()) {};
       };
   
        class KnownMagneticDisturbance : public GenericCommand
       {
       public:
           enum class State : uint8_t { NotPresent = 0, Present = 1 } state;
   
           KnownMagneticDisturbance(State state) : GenericCommand(new VN::KnownMagneticDisturbance(static_cast<VN::KnownMagneticDisturbance::State>(state))) {};
       };
   
        class KnownAccelerationDisturbance : public GenericCommand
       {
       public:
           enum class State : uint8_t { NotPresent = 0, Present = 1 } state;
   
           KnownAccelerationDisturbance(State state) : GenericCommand(new VN::KnownAccelerationDisturbance(static_cast<VN::KnownAccelerationDisturbance::State>(state))) {};
       };
   
        class SetInitialHeading : public GenericCommand
       {
       public:
           SetInitialHeading(float heading) : GenericCommand(new VN::SetInitialHeading(heading)) {};
       };
   
        class AsyncOutputEnable : public GenericCommand
       {
       public:
           enum class State : uint8_t { NotPresent = 0, Present = 1 } state;
   
           AsyncOutputEnable(uint8_t state) : GenericCommand(new VN::AsyncOutputEnable(static_cast<VN::AsyncOutputEnable::State>(state))) {};
       };
   
        class SetFilterBias : public GenericCommand
       {
       public:
           SetFilterBias() : GenericCommand(new VN::SetFilterBias()) {};
       };
   
        class PollBinaryOutputMessage : public GenericCommand
       {
       public:
           PollBinaryOutputMessage(uint8_t binMsgNum) : GenericCommand(new VN::PollBinaryOutputMessage(binMsgNum)) {};
       };
   }
   
   #endif  // VN_CLI_COMMANDS_HPP_
