Firmware Programmer
###################

The Firmware Programmer plugin contains everything necessary to update the firmware on a VectorNav sensor. For most use cases, a single call to the :py:func:`FirmwareProgrammer.FirmwareUpdater.updateFirmware()<vectornav.FirmwareProgrammer.FirmwareUpdater.updateFirmware>` method is all that is required. This method is overloaded to accept either a list of VNX files or a file path to a single VNXML file. 

.. note::
    This plugin will work with any sensor which accepts the Set Boot Loader command. Additional information on the firmware update process can be found in the Firmware Update Protocol technical note. Please reach out to support@vectornav.com to obtain the VNX or VNXML file(s) for your specific sensor.

Usage
=====

.. warning::
    As a part of the firmware update, a Restore Factory Settings will be issued. To ensure preservation of configuration settings, it is recommended to perform a register scan before updating the firmware version. Information on how to perform a register scan can be found on the :ref:`pythonRegisterScanPage` page.

As demonstrated in the Firmware Update example, to use the Firmware Programmer plugin it is first necessary to import all required modules:

.. literalinclude:: ../../examples/firmware_update/firmware_update.py
   :language: python
   :start-at: import vectornav
   :end-at: FirmwareProgrammer
   :dedent: 0

Next, a :py:class:`~vectornav.Sensor` object must be created and used to connect to the VectorNav unit with the  :py:func:`~vectornav.Sensor.connect` method. A :py:class:`~vectornav.FirmwareProgrammer.FirmwareUpdater` object should also be created.

.. literalinclude:: ../../examples/firmware_update/firmware_update.py
   :language: python
   :start-at: Sensor()
   :end-at: FirmwareProgrammer.FirmwareUpdater()
   :dedent: 4


.. note::
    Because it cannot be assumed that the sensor has a valid firmware, connecting using the :py:func:`~vectornav.Sensor.autoConnect` method or verifying connectivity using the :py:func:`~vectornav.Sensor.verifySensorConnectivity` method are not recommended.


To update the firmware, the file path(s) for the firmware file(s) need to be specified and passed to the :py:func:`FirmwareProgrammer.FirmwareUpdater.updateFirmware` method. Either a relative file path or an absolute file path can be used. Additionally, in the :py:func:`FirmwareProgrammer.FirmwareUpdater.updateFirmware` call, the firmware baud rate and bootloader baud rate need to be specified as input parameters. This is done using a :py:class:`FirmwareUpdater.Params()` object. 

.. note::
    To speed up the firmware update, the bootloader can be set to update at higher rates (maximum of 460800 bps) using the ``bootloaderBaudRate`` parameter.


To update a VectorNav unit using a VNXML file:

.. code-block:: python

    vnxmlPath = "VN310.vnxml"
    baudParams = FirmwareProgrammer.FirmwareUpdater.Params()
    baudParams.firmwareBaudRate = 115200
    baudParams.bootloaderBaudRate = 460800
    firmwareUpdater.updateFirmware(sensor,vnxmlPath,baudParams)

Alternatively, to update using individual VNX files, a list of :py:class:`FirmwareProgrammer.FirmwareUpdater.File` objects must be created. This list includes a filepath to each VNX firmware file as well as its associated processor to which to upload the firmware. If multiple VNX files are listed, the firmware will be updated as ordered by this list.

.. code-block:: python

    navFile =  FirmwareProgrammer.FirmwareUpdater.File("VN310NAV.vnx",FirmwareProgrammer.FirmwareUpdater.Processor.Nav)
    gnssFile = FirmwareProgrammer.FirmwareUpdater.File("VN310GNSS.vnx",FirmwareProgrammer.FirmwareUpdater.Processor.Gnss)
    imuFile = FirmwareProgrammer.FirmwareUpdater.File("VN310IMU.vnx",FirmwareProgrammer.FirmwareUpdater.Processor.Imu)
    vnxFilePaths = vectornav.FilePaths()
    vnxFilePaths.push_back(navFile)
    vnxFilePaths.push_back(gnssFile)
    vnxFilePaths.push_back(imuFile)
    firmwareUpdater.updateFirmware(sensor,vnxFilePaths,baudParams)

Command Line 
^^^^^^^^^^^^

The Firmware Update example can also be run as a command-line executable, with the usage defined as:

.. code-block:: python

    usage = "[--PortName={port_name}] [--{Processor}={file_path}... | --VnXml={file_path}] [--firmwareBaudRate={baudRate}] [--bootloaderBaudRate={baudRate}]";

For example, the command line can be used as

.. code-block:: console

    python ./python/examples/firmware_programmer/firmware_programmer.py --PortName=/dev/ttyUSB0 --Nav=./VN310NavFirmware.vnx --Imu=./VN310IMUFirmware.vnx --Gnss=./VN310GnssFirmware.vnx  --firmwareBaudRate=115200 --bootloaderBaudRate=460800

would connect to the sensor using the port /dev/ttyUSB0 at default 115200 bps, upload the selected NAV firmware file, then the IMU firmware file, then the GNSS firmware file. Each firmware update would occur at the bootloaderBaudRate of 460800 bps.

API
===

The Python API for the Firmware Programmer plugin is modeled from the C++ API which can be found here:
:ref:`FirmwareProgrammer <plugins_cpp:namespace_VN__FirmwareProgrammer>`
