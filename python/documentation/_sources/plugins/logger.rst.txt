.. _pythonLoggerPage:

Logger
######

The Logger plugin is a lightweight plugin that allows users to easily log all bytes received from a VectorNav unit to a binary file without the need to parse the packets.
This plugin can be used in conjunction with the Data Export plugin, which allows users to export the binary file that was logged into a *CSV*, *TXT*, or *RINEX* file. Information on how to export a binary file onced it has been logged with the Logger plugin can be found on the :ref:`pythonDataExportPage` page.

Usage
=====

As demonstrated in the Simple Logger example, to use the Logger plugin it is first necessary to import all required modules:

.. literalinclude:: ../../examples/simple_logger/simple_logger.py
   :language: python
   :start-at: from vectornav
   :end-at: import Logger
   :dedent: 0

Next, create a :py:class:`~vectornav.Sensor` object and connect to the VectorNav unit, such as by using the :func:`~vectornav.Sensor.autoConnect` method.

.. literalinclude:: ../../examples/simple_logger/simple_logger.py
   :language: python
   :start-at: Sensor()
   :end-at: print(f"Connected to {portName} at {sensor.connectedBaudRate()}")
   :dedent: 4


Before data logging can begin, the resources required for logging need to be set up. The :py:class:`Logger.SimpleLogger <vectornav.Plugins.Logger.SimpleLogger>` object requires a :py:class:`~vectornav.ByteBuffer` object as well as the path of the desired log file. The :py:class:`~vectornav.ByteBuffer` object is a user-defined buffer where bytes will temporarily be stored before they are written to the log file.

.. literalinclude:: ../../examples/simple_logger/simple_logger.py
   :language: python
   :start-at: bufferToLog
   :end-at: Logger.SimpleLogger
   :dedent: 4


.. warning::
    If the buffer overruns due to insufficient size, data will be missed. Ensure the buffer is appropriately sized based on the expected data throughput from the VectorNav unit to avoid losing any data while logging.

Once the :py:class:`~vectornav.ByteBuffer` and :py:class:`Logger.SimpleLogger <vectornav.Plugins.Logger.SimpleLogger>` objects are instantiated, register the :py:class:`~vectornav.ByteBuffer` object with the :py:class:`~vectornav.Sensor` object as follows:

.. literalinclude:: ../../examples/simple_logger/simple_logger.py
   :language: python
   :start-at: sensor.registerReceivedByteBuffer(bufferToLog)
   :end-at: sensor.registerReceivedByteBuffer(bufferToLog)
   :dedent: 4

..  note::
    When using the SimpleLogger class, the logger must be started and stopped manually using the :func:`SimpleLogger.start() <vectornav.Plugins.Logger.SimpleLogger.start>` and :func:`SimpleLogger.stop() <vectornav.Plugins.Logger.SimpleLogger.stop>` methods.

To create the log file and start logging data from the VectorNav unit, call the :func:`Logger.SimpleLogger.start() <vectornav.Plugins.Logger.SimpleLogger.start>` method. It it important to ensure that this call is successful, otherwise the logger was not able to create the file. 

.. literalinclude:: ../../examples/simple_logger/simple_logger.py
   :language: python
   :start-at: if logger.start()
   :end-at: print("Error: Failed to write to file")
   :dedent: 4

..  note::
    This call to start data logging spawns a separate thread dedicated to writing data to the file. This ensures that file write operations do not block the main thread, allowing it to continue processing efficiently.

While logging, the user should handle any asynchronous errors, such as buffer overruns, using the :func:`~vectornav.Sensor.throwIfAsyncError` method. Any buffer overruns indicate that data has been dropped from the sensor during logging.

.. literalinclude:: ../../examples/simple_logger/simple_logger.py
   :language: python
   :start-at: while
   :end-before: logger.stop()
   :dedent: 4

Stopping the logger is just as easy -- simply call the :func:`SimpleLogger.stop() <vectornav.Plugins.Logger.SimpleLogger.stop>` method and deregister the :py:class:`~vectornav.ByteBuffer` object. 

.. literalinclude:: ../../examples/simple_logger/simple_logger.py
   :language: python
   :start-at: logger.stop()
   :end-at: print(f"Logged {logger.numBytesLogged()} bytes.")
   :dedent: 4


API
===

The Python API for the Logger plugin is modeled from the C++ API which can be found here:
:ref:`Logger <plugins_cpp:namespace_VN__Logger>`
