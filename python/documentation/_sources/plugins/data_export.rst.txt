.. _pythonDataExportPage:

Data Export (*BETA*)
####################

The DataExport plugin provides the necessary classes to export data form the sensor directly to various file formats such as Csv, Ascii, and Rinex files. In addition, the same classes can be used to export data from a file.

.. warning::
	This plugin is currently in *BETA* and may be subject to interface changes in the future.

Usage
=====

The DataExport plugin works via the Exporter class. It is an abstract base class where other exporters like :py:class:`~vectornav.Plugins.DataExport.ExporterCsv`, :py:class:`~vectornav.Plugins.DataExport.ExporterAscii`, etc.. are derived from insuring a common interface. The mechanism from a file and in real-time are slightly different. The examples of both are in the subsequent sections. 

Exporting in Real-Time
^^^^^^^^^^^^^^^^^^^^^^

To export data from a CSV in real-time requires the following imports

.. literalinclude:: ../../examples/data_export/from_sensor/data_export_from_sensor.py
   :language: python
   :start-at: import Sensor
   :end-at: DataExport
   :dedent: 0

We can create a ExporterCsv class which has two arguments -- the folder to log the CSV files, and whether to include system timestamps (the time reported by the computer when a packet of data was received). The ExporterCsv class requires a **folder** not a file path. This is because each unique packet output by the sensor will generate its own CSV file.

.. literalinclude:: ../../examples/data_export/from_sensor/data_export_from_sensor.py
   :language: python
   :start-at: csvExporter
   :end-at: csvExporter
   :dedent: 4

Before exporting data from the sensor, the exporter needs to provide its internal queue to a subscriber of your choice. For all data from the sensor subscribe to both Ascii and Binary packets:

.. literalinclude:: ../../examples/data_export/from_sensor/data_export_from_sensor.py
   :language: python
   :start-at: Sensor()
   :end-at: Sensor()
   :dedent: 4
.. literalinclude:: ../../examples/data_export/from_sensor/data_export_from_sensor.py
   :language: python
   :start-at: # 3. Add a subscriber to all binary and ASCII packets
   :end-before: # 4. Log data from the VectorNav unit
   :dedent: 4


With the subscribers setup, connect to the sensor and begin logging:

.. literalinclude:: ../../examples/data_export/from_sensor/data_export_from_sensor.py
   :language: python
   :start-at: autoConnect
   :end-at: autoConnect
   :dedent: 8
.. literalinclude:: ../../examples/data_export/from_sensor/data_export_from_sensor.py
   :language: python
   :start-at: csvExporter.start()
   :end-at: csvExporter.stop()
   :dedent: 4

Exporting from a file
^^^^^^^^^^^^^^^^^^^^^

Exporting data from a file requires quite a few pieces. First create a sensor with the :py:class:`~vectornav.Sensor.MeasQueueMode`` set to Off.

.. literalinclude:: ../../examples/data_export/from_file/data_export_from_file.py
   :language: python
   :start-at: pushToCompositeData
   :end-at: Sensor(pushToCompositeData)
   :dedent: 4

Create the exporters to your desired file types and subscribe the sensor to their Queue pointers

.. literalinclude:: ../../examples/data_export/from_file/data_export_from_file.py
   :language: python
   :start-at: asciiExporter
   :end-before: skippedByteExporter
   :dedent: 4

Start the desired exporter threads.

.. literalinclude:: ../../examples/data_export/from_file/data_export_from_file.py
   :language: python
   :start-at: asciiExporter.start()
   :end-before: csvExporter.start()
   :dedent: 4

Connect the sensor to the input file and monitor for errors.

.. literalinclude:: ../../examples/data_export/from_file/data_export_from_file.py
   :language: python
   :start-at: sensor.connect(filePath)
   :end-at: sensor.disconnect()
   :dedent: 4

Lastly, stop the exporter threads

.. literalinclude:: ../../examples/data_export/from_file/data_export_from_file.py
   :language: python
   :start-at: asciiExporter.stop()
   :end-before: csvExporter.stop()
   :dedent: 4

API
===

The Python API for the DataExport plugin is modeled from the C++ API which can be found here:
:ref:`DataExport <plugins_cpp:namespace_VN__DataExport>`

.. ExporterCsv
.. ^^^^^^^^^^^

.. .. py:class:: vectornav.Plugins..DataExport.ExporterCsv(path: str, enableSystemTimeStamps: bool = false)

..     An Exporter that will parse data packets from the sensor and export that data to a unique CSV file.

..     .. py:method:: start

..         Starts a thread that logs data in the background

..     .. py:method:: stop

..         Stops the logging thread and closes created files

..     .. py:method:: isLogging

..         Returns if the logger is currently logging data

..     .. py:method:: getQueuePtr

..         Returns a pointer to the internal queue. Required for real-time exporting

..     .. py:method:: exportToFile

..         Method to manually control when the Exporter writes to a file
    
.. ExporterAscii
.. ^^^^^^^^^^^^^

.. .. py:class:: vectornav.Plugins.DataExport.ExporterAscii(path: str)

..     An Exporter to export data all ASCII based data from the sensor into their respective file.
    
..     .. py:method:: start

..         Starts a thread that logs data in the background

..     .. py:method:: stop

..         Stops the logging thread and closes created files

..     .. py:method:: isLogging

..         Returns if the logger is currently logging data

..     .. py:method:: getQueuePtr

..         Returns a pointer to the internal queue. Required for real-time exporting

..     .. py:method:: exportToFile

..         Method to manually control when the Exporter writes to a file
    
.. ExporterRinex
.. ^^^^^^^^^^^^^

.. .. py:class:: vectornav.Plugins.DataExport.ExporterRinex(path: str, gnssGroup: int)

..     An Exporter to export data to the RINEXv3 format. Requries gnssRawMeas to be enabled.

..     .. py:method:: start

..         Starts a thread that logs data in the background

..     .. py:method:: stop

..         Stops the logging thread and closes created files

..     .. py:method:: isLogging

..         Returns if the logger is currently logging data

..     .. py:method:: getQueuePtr

..         Returns a pointer to the internal queue. Required for real-time exporting

..     .. py:method:: exportToFile

..         Method to manually control when the Exporter writes to a file
    
.. .. ExporterImr
.. .. ^^^^^^^^^^^

.. .. .. py:class:: vectornav.Plugins.DataExport.ExporterImr(path: str)

.. ..     An Exporter class that will export data into the IMR file format. Requires gpsTow, uncompAccel and uncompGyro to be enabled in the same output message.

.. ..     .. py:method:: start

.. ..         Starts a thread that logs data in the background

.. ..     .. py:method:: stop

.. ..         Stops the logging thread and closes created files

.. ..     .. py:method:: isLogging

.. ..         Returns if the logger is currently logging data

.. ..     .. py:method:: getQueuePtr

.. ..         Returns a pointer to the internal queue. Required for real-time exporting

.. ..     .. py:method:: exportToFile

.. ..         Method to manually control when the Exporter writes to a file
    
.. FileExporter
.. ^^^^^^^^^^^^
.. .. py:class:: vectornav.Plugins.DataExport.FileExporter 

..     A convenience class for helping export data from a binary file.

..     .. py:method:: processFile(path: str)

..         Processes the file into all exporters that have been added

..     .. py:method:: addCsvExporter(path: str, enableSystemTimeStamps: bool = false)

..         Adds a ExporterCsv class to the list of exporters
    
..     .. py:method:: addAsciiExporter(path: str)
    
..         Adds a ExporterAscii class to the list of exporters
        
..     .. py:method:: addRinexExporter(path: str, gnssGroup: int)
    
..         Adds a ExporterRinex class to the list of exporters
        
..     .. py:method:: addImrExporter(path: str)
    
..         Adds a ExporterImr class to the list of exporters
    
