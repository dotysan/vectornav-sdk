Migration Guide
###############

.. _migrationGuidePython:

This Python migration guide highlights the changes between VectorNav's Programming Library and VectorNav's Software Development Kit (SDK) for Python applications. This guide is not a how-to guide but rather a document of new features and changes between the two software packages to ensure a smooth transition for users migrating from the Programming Library to the SDK.  As discussed throughout this document, the fundamental way to interface with the sensor is the same across the two software packages but many features have been updated, and the performance has improved significantly in the SDK. 

Notable Changes and Features
============================

Highlights
^^^^^^^^^^
* 64-bit Python support
* High-rate data stability (can output above 200 Hz)
* Ability to catch exceptions
* Significant performance improvements
* Added measurements and registers
* Ability to log raw serial data
* New plugin support (For a list of available plugins in the VNSDK, see :ref:`pages/migration_guide:Plugin List`)
* Compatibility with FB packets

Configuration File
^^^^^^^^^^^^^^^^^^
The VectorNav Python module was compiled using the settings configured in the ``cpp/include/vectornav/Config.hpp`` file. These settings were optimized to work well on a wide range of platforms from embedded systems to desktop computers. In applications that are not memory-constrained, it may be desired to modify these configuration settings, such as to increase buffer sizes. To do so, the user would need to configure the desired settings in the ``Config.hpp`` file and rebuild the VectorNav Python module.

Migrating from the VectorNav Programming Library to the VNSDK
=============================================================
The Python SDK wraps the C++ SDK using `pybind11 <https://pybind11.readthedocs.io/>`_ to provide a Python-accessible module. This migration guide provides the basic communication differences between the VNSDK and the Programming Library for Python.

Naming Conventions
^^^^^^^^^^^^^^^^^^
- **Methods**, **member names**, and **variable names** are written in **camelCase**. For example, a composite data variable accessing the accel value will be written as `compositeData.imu.accel`

- **Types**, **enumeration values**, **namespaces**, and **classes** are written in **PascalCase**. For example, a register enum for the serial port will be written as `SerialPort`

Error Handling
^^^^^^^^^^^^^^
Before explaining how to read and write registers, the user should know the differences in handling errors between the two software packages. While both are Python libraries wrapping C++ code, the Programming Library was unable to catch exceptions through the language barrier, causing a crash on any exception thrown in C++, regardless of whether it was supposed to be caught in Python. The VNSDK C++ library does not throw exceptions; it instead returns error codes which are propagated to the Python code and thrown natively in Python. Because of this, all exceptions can be caught as native Python exceptions.

.. code-block:: python

    # VNSDK
    try:
        sensor.readRegister(modelRegister)
    except Exception as latestError:
        print(f"Error: {latestError} encountered when reading Register 1 (Model).\n")


Connecting to the Unit
^^^^^^^^^^^^^^^^^^^^^^
For both software packages, the serial port name is strictly necessary to connect to the unit. In the VectorNav Programming Library, the baud rate must also be known. With the VNSDK, there is an option to specify the baud rate using the :func:`~vectornav.Sensor.connect` method, but a new :func:`~vectornav.Sensor.autoConnect` method is also available that will scan the specified port for the unit's baud rate.

To communicate with the unit, a sensor object must be created before connection can be established. In the VectorNav Programming Library this is done by
    
.. code-block:: python

    # VN Programming Library
    s = VnSensor()
    s.connect(sensorPort, sensorBaudRate)

While in the VNSDK, the sensor is connected using the :func:`~vectornav.Sensor.autoConnect` method below:

.. code-block:: python

    # VNSDK
    sensor = Sensor()
    sensor.autoConnect(portName)
    print(f"Connected to {portName} at {sensor.connectedBaudRate()}")

Accessing Registers
^^^^^^^^^^^^^^^^^^^
In the VectorNav Programming Library, a `VnSensor` object is created with each read or write register command as a method of that object. In the VNSDK, a :py:class:`~vectornav.Sensor` object is still created for interaction, but now only two methods, :func:`~vectornav.Sensor.readRegister` and func:`~vectornav.Sensor.writeRegister`, exist for register interaction. Each register is now its own class that will be populated when a :func:`~vectornav.Sensor.readRegister` or :func:`~vectornav.Sensor.writeRegister` request is sent. The examples below will show differences between frequently used commands.

Reading Registers
-----------------
Using the Programming Library, the user would create a VnSensor object and call the respective read register method. For example, the following code reads the *Yaw, Pitch, Roll* register (Register 8) using the Programming Library.

.. code-block:: python

    # VN Programming Library
    ypr = s.read_yaw_pitch_roll()
    print(ypr)


In the VNSDK, the user creates the :py:class:`~vectornav.Sensor` object and a ``Register`` object for the register they would like to read. This ``Register`` object is then passed to the :func:`~vectornav.Sensor.readRegister` method.

.. code-block:: python

    # VNSDK
    yprRegister = Registers.Attitude.YawPitchRoll()
    sensor.readRegister(yprRegister)
    print(f"Current Reading: Yaw - {yprRegister.yaw}, Pitch - {yprRegister.pitch}, Roll - {yprRegister.roll} ")
    
Writing Registers
-----------------

Writing to the registers incorporates the same changes as reading the registers. The following examples will show the difference between writing to the *Async Data Output Type* register (Register 6). To configure the VectorNav Programming Library to output the *VNYPR* message, create the sensor object and then write to the *Async Data Output Type* register:

.. code-block:: python

    # VN Programming Library
    s.write_async_data_output_type(1, 1) # ador = 1, port = 1

In the VNSDK, a ``Register`` object has to be created and passed to the :func:`~vectornav.Sensor.writeRegister` method, much like reading a register.

.. code-block:: python

    # VNSDK
    asyncDataOutputType = Registers.System.AsyncOutputType()
    asyncDataOutputType.ador = Registers.System.AsyncOutputType.Ador.YPR
    asyncDataOutputType.serialPort = Registers.System.AsyncOutputType.SerialPort.Serial1
    sensor.writeRegister(asyncDataOutputType)
    
Extracting Asynchronous Data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the Programming Library, two methods exist to extract asynchronous measurements: using callbacks to parse and consume a raw packet and using a ``CompositeData`` object with the ``EzAsyncData`` class. Because the VNSDK is tightly integrated with its ``CompositeData`` class, this section outlines how to migrate between ``CompositeData`` classes.

The :py:class:`~vectornav.CompositeData` Class
----------------------------------------------

Both the Programming Library and VNSDK provide a ``CompositeData`` class that are reasonably similar to each other. In both codebases, each ``CompositeData`` object allocates memory for every possible measurement output from the unit, optionally containing a subset of those measurements. The Programming Library's ``CompositeData`` class maintains public data members, getters, setters, and present booleans. The VNSDK's :py:class:`~vectornav.CompositeData` only contains public data members, instead opting to report which variables are optionally ``None``. In this way, the Programming Library's ``CompositeData`` class feels more like a true class, whereas the VNSDK feels more like a data structure.

The first distinction is in organization; the Programming Library's ``CompositeData`` contains each measurement type accessor by getter methods at the top level, whereas the VNSDK's :py:class:`~vectornav.CompositeData` contains each measurement type directly accessable, organized in their respective binary groups, as defined by the Interface Control Document (ICD). For example, to access the ypr field in the Programming Library's ``CompositeData`` object would be accessed by ``cd.yaw_pitch_roll()``, wheras using the SDK's :py:class:`~vectornav.CompositeData` object would be :py:class:`vectornav.AttitudeGroup.ypr`.

The second distinction is in the reporting of updated or nonupdated measurement types; the Programming Library's ``CompositeData`` provides ``has`` methods which return a bool of whether the requested measurement type is present. The VNSDK's :py:class:`~vectornav.CompositeData` object natively holds each measurement type as optionally ``None``, eliminating the need for a separate method to check if it is present. For example, the presence of that same ypr measurement in the Programming Library would be validated by ``cd.has_yaw_pitch_roll()``, whereas in the VNSDK would be validated by a comparison to ``None``.

Besides the snake case to camel case convention change, there also are some minor measurement type name changes (i.e. Programming Library's ``acceleration`` to VNSDK's :py:class:`~vectornav.CompositeData.imu.accel`), where the VNSDK's :py:class:`~vectornav.CompositeData` naming will always match the latest ICD.

:py:class:`~vectornav.CompositeData` Accessor Methods
------------------------------------------------------

The Programming Library's ``VnSensor`` class does not natively handle ``CompositeData`` classes, so a separate class---`EzAsyncData`---has to handle parsing and reporting the objects. In contrast, the VNSDK's :py:class:`~vectornav.Sensor` class natively parses to :py:class:`~vectornav.CompositeData` objects and reports them to the user. Both ``EzAsyncData`` and ``Sensor`` produce exactly one ``CompositeData`` object per measurement message received from the unit.

The ``EzAsyncData`` class provides two ways to retrieve data: the ``EzAsyncData.current_data`` attribute and the ``EzAsyncData.next_data`` function; the :py:class:`~vectornav.Sensor` class provides two functions :py:meth:`~vectornav.Sensor.getNextMeasurement` and :py:meth:`~vectornav.Sensor.getMostRecentMeasurement`. The ``EzAsyncData`` class maintains only the latest measurement received, whereas the VNSDK maintains a queue of :py:class:`~vectornav.CompositeData` objects. As such, there are some minor differences between the two codebases to note when accessing :py:class:`~vectornav.CompositeData` objects.

In most cases---where the polling rate for the latest measurement data exceeds the unit's measurement output rate---a call to ``EzAsyncData.current_data`` is similar in use to non-blocking calls of both :py:meth:`~vectornav.Sensor.getNextMeasurement` and :py:meth:`~vectornav.Sensor.getMostRecentMeasurement`. In these cases, ``EzAsyncData.current_data`` will repeatedly output a ``CompositeData`` object parsed from the most recent measurement packet, whereas the :py:class:`~vectornav.Sensor` methods will output that :py:class:`~vectornav.CompositeData` object only once. When the polling rate exceeds the output rate, ``EzAsyncData.next_data`` is nearly identical to a blocking call of both :py:meth:`~vectornav.Sensor.getNextMeasurement` and :py:meth:`~vectornav.Sensor.getMostRecentMeasurement`, but should probably be replaced with a blocking call to :py:meth:`~vectornav.Sensor.getMostRecentMeasurement`.

When the user's measurement polling rate is less than the unit's measurement output rate, the presence of a :py:class:`~vectornav.CompositeData` queue in the :py:class:`~vectornav.Sensor` class is more apparent. In this case, ``EzAsyncData.current_data`` is identical to a non-blocking call of :py:meth:`~vectornav.Sensor.getMostRecentMeasurement`. While there is no direct analogue to ``EzAsyncData.next_data``, it is most similar to a blocking call of :py:meth:`~vectornav.Sensor.getMostRecentMeasurement`, with the exception that :py:meth:`~vectornav.Sensor.getMostRecentMeasurement` returns immediately if a measurement is present in the queue upon invocation--- ``EzAsyncData.next_data`` necessarily blocks upon receipt of a measurement subsequent to the invocation. In this case, ``EzAsyncData`` drops ``CompositeData`` objects parsed between polls, whereas :py:class:`~vectornav.Sensor` maintains all :py:class:`~vectornav.CompositeData` objects parsed (until the queue capacity is reached). Consequently, the user can successively read all the measurement packets since their last poll using :py:meth:`~vectornav.Sensor.getNextMeasurement` to prevent data loss.

The syntax to retrieve a ``CompositeData`` object is slightly different between the two codebases. The ``EzAsyncData`` method always returns a ``CompositeData`` object, whereas, the :py:class:`~vectornav.Sensor` method returns either a :py:class:`~vectornav.CompositeData` object or `None`, requiring a null check before accessing the data. For example, in the VectorNav Programming Library we can access composite data as follows.

.. code-block:: python

    # VN Programming Library
    cd = ez.current_data
    if cd.has_yaw_pitch_roll:
        print(f"YPR: {cd.yaw_pitch_roll}")

The same composite data would be accessed in the VNSDK as shown below.

.. code-block:: python

    # VNSDK
    compositeData = sensor.getNextMeasurement()
    if not compositeData:
        continue
    if compositeData.matchesMessage("VNYPR"):
        ypr = compositeData.attitude.ypr
        print(f"Yaw: {ypr.yaw}, Pitch: {ypr.pitch}, Roll: {ypr.roll}")

Plugin List
===========

Firmware Programmer
^^^^^^^^^^^^^^^^^^^
While this plugin is available in the Programming Library, it has been updated with the issuance of the VNSDK. The new Firmware Programmer plugin has the ability to accept both *VNX* and *VNXML* files, contains significant stability improvements, and has much more flexible and simple syntax. This plugin allows the users to update their unit's firmware without having to connect it to VectorNav's GUI, Control Center, or create their own embedded updater. All firmware updates must be performed over the main port, UART-1, and communication must be established before an update can occur. More information on this plugin can be found on the :ref:`plugins/firmware_programmer:Firmware Programmer` page.

Register Scan
^^^^^^^^^^^^^
The Register Scan plugin is a newly added plugin unique to the VNSDK. This plugin is capable of producing an XML file containing the non-default registers on the unit, or uploading an XML file of register values to the unit. It is similar to and interoperable with the "Save Config" and "Load Config" buttons on Control Center. Additional information can be found on the :ref:`plugins/register_scan:Register Scan` page.

Logger
^^^^^^
The Logger plugin allows users to easily log all bytes received from the unit to a binary file without the need to parse the packets. The Programming Library does not have any native capaibility to do this, and was most often accomplished by custom code utilizing the ``RawDataReceivedHandler``. Additional information can be found on the :ref:`plugins/logger:Logger` page.

Data Export
^^^^^^^^^^^
The Data Export plugin can export data into formats such as a *CSV*, *TXT*, or *RINEX* file. The plugin can handle data from either previously logged binary files or data directly from a VectorNav unit. Additionally, it can handle outputting to multiple different formats at once. Additional information can be found on the :ref:`pythonDataExportPage` page.

Math
^^^^
The Math plugin expands upon the Programming Library's previous vector and matrix math by also including data conversions and expanded linear algebra functions. More information on this plugin can be found in the :ref:`pythonMathPage` section.