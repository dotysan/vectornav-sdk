Advanced Functionality
######################


Non-Blocking Commands
=====================
In some cases, it is necessary to send commands without blocking, perform other operations, and later return to validate the unit's response. This is what the generic :py:func:`vectornav.Sensor.sendCommand` method is for. To do so:
   #. Create the ``GenericCommand`` object that we would like to send to the unit

      .. literalinclude:: ../../examples/non_blocking_commands/non_blocking_commands.py
         :linenos:
         :lineno-match:
         :language: python
         :start-at: kmd
         :end-at: KnownMagneticDisturbance
         :caption: GenericCommand Instantiation (examples/non_blocking_commands/non_blocking_commands.py)

   #. Call the ``sendCommand`` method with our ``GenericCommand`` object and the waitMode specified as ``Sensor.SendCommandBlockMode.none``

      .. literalinclude:: ../../examples/non_blocking_commands/non_blocking_commands.py
         :linenos:
         :lineno-match:
         :language: python
         :start-at: sendCommand
         :end-at: sendCommand
         :caption: Send GenericCommand (examples/non_blocking_commands/non_blocking_commands.py)

.. A full list of available commands can be found in :ref:`file_include_vectornav_Interface_Commands.hpp`.

The command will then be sent to the unit and added to a queue, waiting for a corresponding response from the unit. When a command response (i.e. non-measurement ASCII packet) is seen from the unit, the response will attempt to be matched with the oldest command sent in the queue.
If the response matches, the function exits. If not, it will continue through the queue (popping each command from the queue) until either the response is matched to a command or the queue is empty. 

This is done because VectorNav units always respond to commands in the order in which they were received. Any synchronous VnError is considered a valid response to any command.

When you are ready to check the unit's response, you can do so using :meth:`vectornav.GenericCommand.getResponse`;

.. literalinclude:: ../../examples/non_blocking_commands/non_blocking_commands.py
   :linenos:
   :lineno-match:
   :language: python
   :start-at: getResponse()
   :end-before: getError()
   :caption: Print GenericCommand Response (examples/non_blocking_commands/non_blocking_commands.py)

If the response is empty, a couple of things may be happening:
   * The command is still in the command queue, awaiting a response
      If this is the case, :meth:`GenericCommand.isAwaitingResponse()` will return ``True``. Whether a command is "awaiting a response" is not time-based; rather, it will be awaiting a response until any command response attempts to match with that command. As such, the correct response could either be to check again later (if only a brief period has elapsed) or to resend the command, assuming it was not received.

   .. code-block:: python
      :caption: GenericCommand Is Awaiting Response

      if (kmd.isAwaitingResponse()):
         # The kmd command is still in the queue. It could either be too early to have heard a response, or this command should be resent.

   * The command has received an invalid response
      In this case, a response has attempted to be matched with the ``GenericCommand`` object. This likely means that the unit did not hear the command and was responding to a subsequent command. Most likely, we should try to resend the command.

Now that we know we have a valid response, we should make sure the response is not a VnError using :meth:`vectornav.GenericCommand.getError` (if the response is any VnError, the unit did not apply the command). 

.. literalinclude:: ../../examples/non_blocking_commands/non_blocking_commands.py
   :linenos:
   :lineno-match:
   :language: python
   :start-at: getError()
   :end-at: }
   :caption: Ensuring Response Isn't Error (examples/non_blocking_commands/non_blocking_commands.py)

If the value returned from ``getError`` is None, no error occurred and the command was accepted by the unit.

.. If the value returned is not empty, the error can be p rinted to a log using :meth:`VN::VnException::what` or identified using :meth:`VN::VnException::errorCode`. Every possible :class:`VN::VnException` in the SDK is guaranteed to have an error code, and each error code is present in the enum class :enum:`VN::Error`. 

Because *Read Register* and *Write Register* are simply specialized commands to the unit, sending the commands non-blocking is very similar to sending any other command non-blocking. The only additional step is the conversion between the ``Register`` object and the ``GenericCommand`` object.

Non-Blocking Read Register
--------------------------

Just like any other *Read Register* command, we first need to instantiate our ``Register`` object.

.. code-block:: python
   :caption: Instantiating Register Object

   velAidRegister = Registers.VelAidingMeas()

We then can produce a ``GenericCommand`` object for the *Read Register* command using the :meth:`vectornav.Register.toReadCommand` method.

.. code-block:: python
   :caption: Register To Read GenericCommand

   velAidWRGCommand = GenericCommand()
   velAidWRGCommand = velAidRegister.toReadCommand();

Now that we have a ``GenericCommand`` object, we can send it non-blocking using the steps in :ref:`pages/advanced_functionality:Non-Blocking Commands`. 

.. After checking for a response and ensuring the response is valid, we can repopulate the original ``Register`` object fields using :meth:`VN::Register::fromCommand`.

.. .. code-block:: python
..    :caption: Register From Read GenericCommand

..    bool errorOccured = velAidRegister.fromCommand(velAidRRGCommand);

.. Assuming the command received a non-error, valid response, the fields of ``velAidRegister`` are now populated with the values from the VectorNav unit, and we can access them as normal members of the object.

Non-Blocking Write Register
---------------------------

Writing a register without blocking is very similar to reading a register without blocking. The only difference is the method called to create the *Write Register* command rather than the *Read Register* command.

Very similar to the first step in :ref:`pages/key_functionality:Writing Registers`, we create our ``Register`` object, populating it with the desired configuration values.

.. literalinclude:: ../../examples/non_blocking_commands/non_blocking_commands.py
   :linenos:
   :lineno-match:
   :language: python
   :start-at: velAidRegister
   :end-at: velAidRegister
   :caption: Instantiating Register Object (examples/non_blocking_commands/non_blocking_commands.py)

.. literalinclude:: ../../examples/non_blocking_commands/non_blocking_commands.py
   :linenos:
   :lineno-match:
   :language: python
   :start-at: velAidRegister.velocityX
   :end-at: velAidRegister.velocityZ
   :caption: Populate Register Object (examples/non_blocking_commands/non_blocking_commands.py)

We then can produce a ``GenericCommand`` object for the *Write Register* command using the :meth:`vectornav.ConfigurationRegister.toWriteCommand` method.

.. literalinclude:: ../../examples/non_blocking_commands/non_blocking_commands.py
   :linenos:
   :lineno-match:
   :language: python
   :start-at: toWriteCommand
   :end-at: toWriteCommand
   :caption: Register To Write GenericCommand (examples/non_blocking_commands/non_blocking_commands.py)

Now that we have our ``GenericCommand`` object for the *Write Register* command, we can send it to the unit and validate acceptance following the steps in :ref:`pages/advanced_functionality:Non-Blocking Commands`.